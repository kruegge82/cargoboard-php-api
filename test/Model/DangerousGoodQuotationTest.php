<?php
/**
 * DangerousGoodQuotationTest
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  kruegge82\cargoboard
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Documentation
 *
 * &lt;h4&gt;Authentication.&lt;/h4&gt; &lt;p&gt;Authentication is done with X-API-KEY. You can request a key via mail to api@cargoboard.com.
 *
 * The version of the OpenAPI document: 1.0.5
 * Contact: api@cargoboard.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace kruegge82\cargoboard\Test\Model;

use PHPUnit\Framework\TestCase;

/**
 * DangerousGoodQuotationTest Class Doc Comment
 *
 * @category    Class
 * @description DangerousGoodQuotation
 * @package     kruegge82\cargoboard
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class DangerousGoodQuotationTest extends TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test "DangerousGoodQuotation"
     */
    public function testDangerousGoodQuotation()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "un_no"
     */
    public function testPropertyUnNo()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "substance_name"
     */
    public function testPropertySubstanceName()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "package_quantity"
     */
    public function testPropertyPackageQuantity()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "package_type"
     */
    public function testPropertyPackageType()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "quantity"
     */
    public function testPropertyQuantity()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "weight_gross"
     */
    public function testPropertyWeightGross()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "weight_net_or_volume"
     */
    public function testPropertyWeightNetOrVolume()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "weight_net_or_volume_unit"
     */
    public function testPropertyWeightNetOrVolumeUnit()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "risk_additional1"
     */
    public function testPropertyRiskAdditional1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "risk_main"
     */
    public function testPropertyRiskMain()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "points_total"
     */
    public function testPropertyPointsTotal()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "points_multiplier"
     */
    public function testPropertyPointsMultiplier()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "adr_version"
     */
    public function testPropertyAdrVersion()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "classification_code"
     */
    public function testPropertyClassificationCode()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "packaging_group"
     */
    public function testPropertyPackagingGroup()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "is_exempted_quantity"
     */
    public function testPropertyIsExemptedQuantity()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "is_limited_quantity"
     */
    public function testPropertyIsLimitedQuantity()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "is_high_consequences_dangerous_good"
     */
    public function testPropertyIsHighConsequencesDangerousGood()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "technical_name_for_not_otherwise_specified_substances"
     */
    public function testPropertyTechnicalNameForNotOtherwiseSpecifiedSubstances()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "net_explosive_mass"
     */
    public function testPropertyNetExplosiveMass()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "transport_category"
     */
    public function testPropertyTransportCategory()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "tunnel_restriction"
     */
    public function testPropertyTunnelRestriction()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
