<?php
/**
 * DangerousGoodOrder
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  kruegge82\cargoboard
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Documentation
 *
 * &lt;h4&gt;Authentication.&lt;/h4&gt; &lt;p&gt;Authentication is done with X-API-KEY. You can request a key via mail to api@cargoboard.com.
 *
 * The version of the OpenAPI document: 1.0.5
 * Contact: api@cargoboard.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\cargoboard\Model;

use \ArrayAccess;
use \kruegge82\cargoboard\ObjectSerializer;

/**
 * DangerousGoodOrder Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\cargoboard
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DangerousGoodOrder implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DangerousGoodOrder';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'un_no' => 'string',
        'substance_name' => 'string',
        'package_quantity' => 'int',
        'package_type' => 'string',
        'quantity' => 'int',
        'weight_gross' => 'int',
        'weight_net_or_volume' => 'int',
        'weight_net_or_volume_unit' => 'string',
        'risk_additional1' => 'string',
        'risk_main' => 'string',
        'points_total' => 'int',
        'points_multiplier' => 'int',
        'adr_version' => 'string',
        'classification_code' => 'string',
        'packaging_group' => 'string',
        'is_exempted_quantity' => 'bool',
        'is_limited_quantity' => 'bool',
        'is_high_consequences_dangerous_good' => 'bool',
        'technical_name_for_not_otherwise_specified_substances' => 'string',
        'net_explosive_mass' => 'int',
        'transport_category' => 'string',
        'tunnel_restriction' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'un_no' => null,
        'substance_name' => null,
        'package_quantity' => null,
        'package_type' => null,
        'quantity' => null,
        'weight_gross' => null,
        'weight_net_or_volume' => null,
        'weight_net_or_volume_unit' => null,
        'risk_additional1' => null,
        'risk_main' => null,
        'points_total' => null,
        'points_multiplier' => null,
        'adr_version' => null,
        'classification_code' => null,
        'packaging_group' => null,
        'is_exempted_quantity' => null,
        'is_limited_quantity' => null,
        'is_high_consequences_dangerous_good' => null,
        'technical_name_for_not_otherwise_specified_substances' => null,
        'net_explosive_mass' => null,
        'transport_category' => null,
        'tunnel_restriction' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'un_no' => false,
        'substance_name' => false,
        'package_quantity' => false,
        'package_type' => false,
        'quantity' => false,
        'weight_gross' => false,
        'weight_net_or_volume' => false,
        'weight_net_or_volume_unit' => false,
        'risk_additional1' => false,
        'risk_main' => false,
        'points_total' => false,
        'points_multiplier' => false,
        'adr_version' => false,
        'classification_code' => false,
        'packaging_group' => false,
        'is_exempted_quantity' => false,
        'is_limited_quantity' => false,
        'is_high_consequences_dangerous_good' => false,
        'technical_name_for_not_otherwise_specified_substances' => false,
        'net_explosive_mass' => false,
        'transport_category' => false,
        'tunnel_restriction' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'un_no' => 'unNo',
        'substance_name' => 'substanceName',
        'package_quantity' => 'packageQuantity',
        'package_type' => 'packageType',
        'quantity' => 'quantity',
        'weight_gross' => 'weightGross',
        'weight_net_or_volume' => 'weightNetOrVolume',
        'weight_net_or_volume_unit' => 'weightNetOrVolumeUnit',
        'risk_additional1' => 'riskAdditional1',
        'risk_main' => 'riskMain',
        'points_total' => 'pointsTotal',
        'points_multiplier' => 'pointsMultiplier',
        'adr_version' => 'adrVersion',
        'classification_code' => 'classificationCode',
        'packaging_group' => 'packagingGroup',
        'is_exempted_quantity' => 'isExemptedQuantity',
        'is_limited_quantity' => 'isLimitedQuantity',
        'is_high_consequences_dangerous_good' => 'isHighConsequencesDangerousGood',
        'technical_name_for_not_otherwise_specified_substances' => 'technicalNameForNotOtherwiseSpecifiedSubstances',
        'net_explosive_mass' => 'netExplosiveMass',
        'transport_category' => 'transportCategory',
        'tunnel_restriction' => 'tunnelRestriction'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'un_no' => 'setUnNo',
        'substance_name' => 'setSubstanceName',
        'package_quantity' => 'setPackageQuantity',
        'package_type' => 'setPackageType',
        'quantity' => 'setQuantity',
        'weight_gross' => 'setWeightGross',
        'weight_net_or_volume' => 'setWeightNetOrVolume',
        'weight_net_or_volume_unit' => 'setWeightNetOrVolumeUnit',
        'risk_additional1' => 'setRiskAdditional1',
        'risk_main' => 'setRiskMain',
        'points_total' => 'setPointsTotal',
        'points_multiplier' => 'setPointsMultiplier',
        'adr_version' => 'setAdrVersion',
        'classification_code' => 'setClassificationCode',
        'packaging_group' => 'setPackagingGroup',
        'is_exempted_quantity' => 'setIsExemptedQuantity',
        'is_limited_quantity' => 'setIsLimitedQuantity',
        'is_high_consequences_dangerous_good' => 'setIsHighConsequencesDangerousGood',
        'technical_name_for_not_otherwise_specified_substances' => 'setTechnicalNameForNotOtherwiseSpecifiedSubstances',
        'net_explosive_mass' => 'setNetExplosiveMass',
        'transport_category' => 'setTransportCategory',
        'tunnel_restriction' => 'setTunnelRestriction'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'un_no' => 'getUnNo',
        'substance_name' => 'getSubstanceName',
        'package_quantity' => 'getPackageQuantity',
        'package_type' => 'getPackageType',
        'quantity' => 'getQuantity',
        'weight_gross' => 'getWeightGross',
        'weight_net_or_volume' => 'getWeightNetOrVolume',
        'weight_net_or_volume_unit' => 'getWeightNetOrVolumeUnit',
        'risk_additional1' => 'getRiskAdditional1',
        'risk_main' => 'getRiskMain',
        'points_total' => 'getPointsTotal',
        'points_multiplier' => 'getPointsMultiplier',
        'adr_version' => 'getAdrVersion',
        'classification_code' => 'getClassificationCode',
        'packaging_group' => 'getPackagingGroup',
        'is_exempted_quantity' => 'getIsExemptedQuantity',
        'is_limited_quantity' => 'getIsLimitedQuantity',
        'is_high_consequences_dangerous_good' => 'getIsHighConsequencesDangerousGood',
        'technical_name_for_not_otherwise_specified_substances' => 'getTechnicalNameForNotOtherwiseSpecifiedSubstances',
        'net_explosive_mass' => 'getNetExplosiveMass',
        'transport_category' => 'getTransportCategory',
        'tunnel_restriction' => 'getTunnelRestriction'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('un_no', $data ?? [], null);
        $this->setIfExists('substance_name', $data ?? [], null);
        $this->setIfExists('package_quantity', $data ?? [], null);
        $this->setIfExists('package_type', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('weight_gross', $data ?? [], null);
        $this->setIfExists('weight_net_or_volume', $data ?? [], null);
        $this->setIfExists('weight_net_or_volume_unit', $data ?? [], null);
        $this->setIfExists('risk_additional1', $data ?? [], null);
        $this->setIfExists('risk_main', $data ?? [], null);
        $this->setIfExists('points_total', $data ?? [], null);
        $this->setIfExists('points_multiplier', $data ?? [], null);
        $this->setIfExists('adr_version', $data ?? [], null);
        $this->setIfExists('classification_code', $data ?? [], null);
        $this->setIfExists('packaging_group', $data ?? [], null);
        $this->setIfExists('is_exempted_quantity', $data ?? [], null);
        $this->setIfExists('is_limited_quantity', $data ?? [], null);
        $this->setIfExists('is_high_consequences_dangerous_good', $data ?? [], null);
        $this->setIfExists('technical_name_for_not_otherwise_specified_substances', $data ?? [], null);
        $this->setIfExists('net_explosive_mass', $data ?? [], null);
        $this->setIfExists('transport_category', $data ?? [], null);
        $this->setIfExists('tunnel_restriction', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets un_no
     *
     * @return string|null
     */
    public function getUnNo()
    {
        return $this->container['un_no'];
    }

    /**
     * Sets un_no
     *
     * @param string|null $un_no un_no
     *
     * @return self
     */
    public function setUnNo($un_no)
    {
        if (is_null($un_no)) {
            throw new \InvalidArgumentException('non-nullable un_no cannot be null');
        }
        $this->container['un_no'] = $un_no;

        return $this;
    }

    /**
     * Gets substance_name
     *
     * @return string|null
     */
    public function getSubstanceName()
    {
        return $this->container['substance_name'];
    }

    /**
     * Sets substance_name
     *
     * @param string|null $substance_name substance_name
     *
     * @return self
     */
    public function setSubstanceName($substance_name)
    {
        if (is_null($substance_name)) {
            throw new \InvalidArgumentException('non-nullable substance_name cannot be null');
        }
        $this->container['substance_name'] = $substance_name;

        return $this;
    }

    /**
     * Gets package_quantity
     *
     * @return int|null
     */
    public function getPackageQuantity()
    {
        return $this->container['package_quantity'];
    }

    /**
     * Sets package_quantity
     *
     * @param int|null $package_quantity package_quantity
     *
     * @return self
     */
    public function setPackageQuantity($package_quantity)
    {
        if (is_null($package_quantity)) {
            throw new \InvalidArgumentException('non-nullable package_quantity cannot be null');
        }
        $this->container['package_quantity'] = $package_quantity;

        return $this;
    }

    /**
     * Gets package_type
     *
     * @return string|null
     */
    public function getPackageType()
    {
        return $this->container['package_type'];
    }

    /**
     * Sets package_type
     *
     * @param string|null $package_type package_type
     *
     * @return self
     */
    public function setPackageType($package_type)
    {
        if (is_null($package_type)) {
            throw new \InvalidArgumentException('non-nullable package_type cannot be null');
        }
        $this->container['package_type'] = $package_type;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int|null $quantity quantity
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets weight_gross
     *
     * @return int|null
     */
    public function getWeightGross()
    {
        return $this->container['weight_gross'];
    }

    /**
     * Sets weight_gross
     *
     * @param int|null $weight_gross weight_gross
     *
     * @return self
     */
    public function setWeightGross($weight_gross)
    {
        if (is_null($weight_gross)) {
            throw new \InvalidArgumentException('non-nullable weight_gross cannot be null');
        }
        $this->container['weight_gross'] = $weight_gross;

        return $this;
    }

    /**
     * Gets weight_net_or_volume
     *
     * @return int|null
     */
    public function getWeightNetOrVolume()
    {
        return $this->container['weight_net_or_volume'];
    }

    /**
     * Sets weight_net_or_volume
     *
     * @param int|null $weight_net_or_volume weight_net_or_volume
     *
     * @return self
     */
    public function setWeightNetOrVolume($weight_net_or_volume)
    {
        if (is_null($weight_net_or_volume)) {
            throw new \InvalidArgumentException('non-nullable weight_net_or_volume cannot be null');
        }
        $this->container['weight_net_or_volume'] = $weight_net_or_volume;

        return $this;
    }

    /**
     * Gets weight_net_or_volume_unit
     *
     * @return string|null
     */
    public function getWeightNetOrVolumeUnit()
    {
        return $this->container['weight_net_or_volume_unit'];
    }

    /**
     * Sets weight_net_or_volume_unit
     *
     * @param string|null $weight_net_or_volume_unit weight_net_or_volume_unit
     *
     * @return self
     */
    public function setWeightNetOrVolumeUnit($weight_net_or_volume_unit)
    {
        if (is_null($weight_net_or_volume_unit)) {
            throw new \InvalidArgumentException('non-nullable weight_net_or_volume_unit cannot be null');
        }
        $this->container['weight_net_or_volume_unit'] = $weight_net_or_volume_unit;

        return $this;
    }

    /**
     * Gets risk_additional1
     *
     * @return string|null
     */
    public function getRiskAdditional1()
    {
        return $this->container['risk_additional1'];
    }

    /**
     * Sets risk_additional1
     *
     * @param string|null $risk_additional1 risk_additional1
     *
     * @return self
     */
    public function setRiskAdditional1($risk_additional1)
    {
        if (is_null($risk_additional1)) {
            throw new \InvalidArgumentException('non-nullable risk_additional1 cannot be null');
        }
        $this->container['risk_additional1'] = $risk_additional1;

        return $this;
    }

    /**
     * Gets risk_main
     *
     * @return string|null
     */
    public function getRiskMain()
    {
        return $this->container['risk_main'];
    }

    /**
     * Sets risk_main
     *
     * @param string|null $risk_main risk_main
     *
     * @return self
     */
    public function setRiskMain($risk_main)
    {
        if (is_null($risk_main)) {
            throw new \InvalidArgumentException('non-nullable risk_main cannot be null');
        }
        $this->container['risk_main'] = $risk_main;

        return $this;
    }

    /**
     * Gets points_total
     *
     * @return int|null
     */
    public function getPointsTotal()
    {
        return $this->container['points_total'];
    }

    /**
     * Sets points_total
     *
     * @param int|null $points_total points_total
     *
     * @return self
     */
    public function setPointsTotal($points_total)
    {
        if (is_null($points_total)) {
            throw new \InvalidArgumentException('non-nullable points_total cannot be null');
        }
        $this->container['points_total'] = $points_total;

        return $this;
    }

    /**
     * Gets points_multiplier
     *
     * @return int|null
     */
    public function getPointsMultiplier()
    {
        return $this->container['points_multiplier'];
    }

    /**
     * Sets points_multiplier
     *
     * @param int|null $points_multiplier points_multiplier
     *
     * @return self
     */
    public function setPointsMultiplier($points_multiplier)
    {
        if (is_null($points_multiplier)) {
            throw new \InvalidArgumentException('non-nullable points_multiplier cannot be null');
        }
        $this->container['points_multiplier'] = $points_multiplier;

        return $this;
    }

    /**
     * Gets adr_version
     *
     * @return string|null
     */
    public function getAdrVersion()
    {
        return $this->container['adr_version'];
    }

    /**
     * Sets adr_version
     *
     * @param string|null $adr_version adr_version
     *
     * @return self
     */
    public function setAdrVersion($adr_version)
    {
        if (is_null($adr_version)) {
            throw new \InvalidArgumentException('non-nullable adr_version cannot be null');
        }
        $this->container['adr_version'] = $adr_version;

        return $this;
    }

    /**
     * Gets classification_code
     *
     * @return string|null
     */
    public function getClassificationCode()
    {
        return $this->container['classification_code'];
    }

    /**
     * Sets classification_code
     *
     * @param string|null $classification_code classification_code
     *
     * @return self
     */
    public function setClassificationCode($classification_code)
    {
        if (is_null($classification_code)) {
            throw new \InvalidArgumentException('non-nullable classification_code cannot be null');
        }
        $this->container['classification_code'] = $classification_code;

        return $this;
    }

    /**
     * Gets packaging_group
     *
     * @return string|null
     */
    public function getPackagingGroup()
    {
        return $this->container['packaging_group'];
    }

    /**
     * Sets packaging_group
     *
     * @param string|null $packaging_group packaging_group
     *
     * @return self
     */
    public function setPackagingGroup($packaging_group)
    {
        if (is_null($packaging_group)) {
            throw new \InvalidArgumentException('non-nullable packaging_group cannot be null');
        }
        $this->container['packaging_group'] = $packaging_group;

        return $this;
    }

    /**
     * Gets is_exempted_quantity
     *
     * @return bool|null
     */
    public function getIsExemptedQuantity()
    {
        return $this->container['is_exempted_quantity'];
    }

    /**
     * Sets is_exempted_quantity
     *
     * @param bool|null $is_exempted_quantity is_exempted_quantity
     *
     * @return self
     */
    public function setIsExemptedQuantity($is_exempted_quantity)
    {
        if (is_null($is_exempted_quantity)) {
            throw new \InvalidArgumentException('non-nullable is_exempted_quantity cannot be null');
        }
        $this->container['is_exempted_quantity'] = $is_exempted_quantity;

        return $this;
    }

    /**
     * Gets is_limited_quantity
     *
     * @return bool|null
     */
    public function getIsLimitedQuantity()
    {
        return $this->container['is_limited_quantity'];
    }

    /**
     * Sets is_limited_quantity
     *
     * @param bool|null $is_limited_quantity is_limited_quantity
     *
     * @return self
     */
    public function setIsLimitedQuantity($is_limited_quantity)
    {
        if (is_null($is_limited_quantity)) {
            throw new \InvalidArgumentException('non-nullable is_limited_quantity cannot be null');
        }
        $this->container['is_limited_quantity'] = $is_limited_quantity;

        return $this;
    }

    /**
     * Gets is_high_consequences_dangerous_good
     *
     * @return bool|null
     */
    public function getIsHighConsequencesDangerousGood()
    {
        return $this->container['is_high_consequences_dangerous_good'];
    }

    /**
     * Sets is_high_consequences_dangerous_good
     *
     * @param bool|null $is_high_consequences_dangerous_good is_high_consequences_dangerous_good
     *
     * @return self
     */
    public function setIsHighConsequencesDangerousGood($is_high_consequences_dangerous_good)
    {
        if (is_null($is_high_consequences_dangerous_good)) {
            throw new \InvalidArgumentException('non-nullable is_high_consequences_dangerous_good cannot be null');
        }
        $this->container['is_high_consequences_dangerous_good'] = $is_high_consequences_dangerous_good;

        return $this;
    }

    /**
     * Gets technical_name_for_not_otherwise_specified_substances
     *
     * @return string|null
     */
    public function getTechnicalNameForNotOtherwiseSpecifiedSubstances()
    {
        return $this->container['technical_name_for_not_otherwise_specified_substances'];
    }

    /**
     * Sets technical_name_for_not_otherwise_specified_substances
     *
     * @param string|null $technical_name_for_not_otherwise_specified_substances technical_name_for_not_otherwise_specified_substances
     *
     * @return self
     */
    public function setTechnicalNameForNotOtherwiseSpecifiedSubstances($technical_name_for_not_otherwise_specified_substances)
    {
        if (is_null($technical_name_for_not_otherwise_specified_substances)) {
            throw new \InvalidArgumentException('non-nullable technical_name_for_not_otherwise_specified_substances cannot be null');
        }
        $this->container['technical_name_for_not_otherwise_specified_substances'] = $technical_name_for_not_otherwise_specified_substances;

        return $this;
    }

    /**
     * Gets net_explosive_mass
     *
     * @return int|null
     */
    public function getNetExplosiveMass()
    {
        return $this->container['net_explosive_mass'];
    }

    /**
     * Sets net_explosive_mass
     *
     * @param int|null $net_explosive_mass net_explosive_mass
     *
     * @return self
     */
    public function setNetExplosiveMass($net_explosive_mass)
    {
        if (is_null($net_explosive_mass)) {
            throw new \InvalidArgumentException('non-nullable net_explosive_mass cannot be null');
        }
        $this->container['net_explosive_mass'] = $net_explosive_mass;

        return $this;
    }

    /**
     * Gets transport_category
     *
     * @return string|null
     */
    public function getTransportCategory()
    {
        return $this->container['transport_category'];
    }

    /**
     * Sets transport_category
     *
     * @param string|null $transport_category transport_category
     *
     * @return self
     */
    public function setTransportCategory($transport_category)
    {
        if (is_null($transport_category)) {
            throw new \InvalidArgumentException('non-nullable transport_category cannot be null');
        }
        $this->container['transport_category'] = $transport_category;

        return $this;
    }

    /**
     * Gets tunnel_restriction
     *
     * @return string|null
     */
    public function getTunnelRestriction()
    {
        return $this->container['tunnel_restriction'];
    }

    /**
     * Sets tunnel_restriction
     *
     * @param string|null $tunnel_restriction Tunnel restriction
     *
     * @return self
     */
    public function setTunnelRestriction($tunnel_restriction)
    {
        if (is_null($tunnel_restriction)) {
            throw new \InvalidArgumentException('non-nullable tunnel_restriction cannot be null');
        }
        $this->container['tunnel_restriction'] = $tunnel_restriction;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


