<?php
/**
 * OrderProduct
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  kruegge82\cargoboard
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Documentation
 *
 * &lt;h4&gt;Authentication.&lt;/h4&gt; &lt;p&gt;Authentication is done with X-API-KEY. You can request a key via mail to api@cargoboard.com.
 *
 * The version of the OpenAPI document: 1.0.5
 * Contact: api@cargoboard.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\cargoboard\Model;

use \ArrayAccess;
use \kruegge82\cargoboard\ObjectSerializer;

/**
 * OrderProduct Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\cargoboard
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OrderProduct implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OrderProduct';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'product' => 'string',
        'truck_type' => 'string',
        'price' => '\kruegge82\cargoboard\Model\Price',
        'price_standard' => '\kruegge82\cargoboard\Model\Price',
        'pickup_on' => '\DateTime',
        'pickup_at_from' => '\DateTime',
        'pickup_at_until' => '\DateTime',
        'runtime' => '\kruegge82\cargoboard\Model\Runtime',
        'delivery' => '\kruegge82\cargoboard\Model\Delivery',
        'cost_items' => '\kruegge82\cargoboard\Model\CostItemProduct[]',
        'co2_emission' => '\kruegge82\cargoboard\Model\CO2Emission',
        'reference' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'product' => null,
        'truck_type' => null,
        'price' => null,
        'price_standard' => null,
        'pickup_on' => 'date-time',
        'pickup_at_from' => 'date-time',
        'pickup_at_until' => 'date-time',
        'runtime' => null,
        'delivery' => null,
        'cost_items' => null,
        'co2_emission' => null,
        'reference' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'product' => false,
        'truck_type' => false,
        'price' => false,
        'price_standard' => false,
        'pickup_on' => false,
        'pickup_at_from' => false,
        'pickup_at_until' => false,
        'runtime' => false,
        'delivery' => false,
        'cost_items' => false,
        'co2_emission' => false,
        'reference' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'product' => 'product',
        'truck_type' => 'truckType',
        'price' => 'price',
        'price_standard' => 'priceStandard',
        'pickup_on' => 'pickupOn',
        'pickup_at_from' => 'pickupAtFrom',
        'pickup_at_until' => 'pickupAtUntil',
        'runtime' => 'runtime',
        'delivery' => 'delivery',
        'cost_items' => 'costItems',
        'co2_emission' => 'co2Emission',
        'reference' => 'reference'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'product' => 'setProduct',
        'truck_type' => 'setTruckType',
        'price' => 'setPrice',
        'price_standard' => 'setPriceStandard',
        'pickup_on' => 'setPickupOn',
        'pickup_at_from' => 'setPickupAtFrom',
        'pickup_at_until' => 'setPickupAtUntil',
        'runtime' => 'setRuntime',
        'delivery' => 'setDelivery',
        'cost_items' => 'setCostItems',
        'co2_emission' => 'setCo2Emission',
        'reference' => 'setReference'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'product' => 'getProduct',
        'truck_type' => 'getTruckType',
        'price' => 'getPrice',
        'price_standard' => 'getPriceStandard',
        'pickup_on' => 'getPickupOn',
        'pickup_at_from' => 'getPickupAtFrom',
        'pickup_at_until' => 'getPickupAtUntil',
        'runtime' => 'getRuntime',
        'delivery' => 'getDelivery',
        'cost_items' => 'getCostItems',
        'co2_emission' => 'getCo2Emission',
        'reference' => 'getReference'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const PRODUCT_DIRECT = 'DIRECT';
    public const PRODUCT_EXPRESS = 'EXPRESS';
    public const PRODUCT_EXPRESS_8 = 'EXPRESS_8';
    public const PRODUCT_EXPRESS_10 = 'EXPRESS_10';
    public const PRODUCT_EXPRESS_12 = 'EXPRESS_12';
    public const PRODUCT_EXPRESS_16 = 'EXPRESS_16';
    public const PRODUCT_FIX = 'FIX';
    public const PRODUCT_FIX_8 = 'FIX_8';
    public const PRODUCT_FIX_10 = 'FIX_10';
    public const PRODUCT_FIX_12 = 'FIX_12';
    public const PRODUCT_FIX_16 = 'FIX_16';
    public const PRODUCT_STANDARD = 'STANDARD';
    public const TRUCK_TYPE_DIRECT_BUS_PLANE = 'DIRECT_BUS_PLANE';
    public const TRUCK_TYPE_DIRECT_BUS_PLANE_XXL = 'DIRECT_BUS_PLANE_XXL';
    public const TRUCK_TYPE_DIRECT_TRUCK_7_5 = 'DIRECT_TRUCK_7_5';
    public const TRUCK_TYPE_DIRECT_TRUCK_12 = 'DIRECT_TRUCK_12';
    public const TRUCK_TYPE_DIRECT_TRUCK_40 = 'DIRECT_TRUCK_40';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProductAllowableValues()
    {
        return [
            self::PRODUCT_DIRECT,
            self::PRODUCT_EXPRESS,
            self::PRODUCT_EXPRESS_8,
            self::PRODUCT_EXPRESS_10,
            self::PRODUCT_EXPRESS_12,
            self::PRODUCT_EXPRESS_16,
            self::PRODUCT_FIX,
            self::PRODUCT_FIX_8,
            self::PRODUCT_FIX_10,
            self::PRODUCT_FIX_12,
            self::PRODUCT_FIX_16,
            self::PRODUCT_STANDARD,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTruckTypeAllowableValues()
    {
        return [
            self::TRUCK_TYPE_DIRECT_BUS_PLANE,
            self::TRUCK_TYPE_DIRECT_BUS_PLANE_XXL,
            self::TRUCK_TYPE_DIRECT_TRUCK_7_5,
            self::TRUCK_TYPE_DIRECT_TRUCK_12,
            self::TRUCK_TYPE_DIRECT_TRUCK_40,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('product', $data ?? [], null);
        $this->setIfExists('truck_type', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('price_standard', $data ?? [], null);
        $this->setIfExists('pickup_on', $data ?? [], null);
        $this->setIfExists('pickup_at_from', $data ?? [], null);
        $this->setIfExists('pickup_at_until', $data ?? [], null);
        $this->setIfExists('runtime', $data ?? [], null);
        $this->setIfExists('delivery', $data ?? [], null);
        $this->setIfExists('cost_items', $data ?? [], null);
        $this->setIfExists('co2_emission', $data ?? [], null);
        $this->setIfExists('reference', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['product'] === null) {
            $invalidProperties[] = "'product' can't be null";
        }
        $allowedValues = $this->getProductAllowableValues();
        if (!is_null($this->container['product']) && !in_array($this->container['product'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'product', must be one of '%s'",
                $this->container['product'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTruckTypeAllowableValues();
        if (!is_null($this->container['truck_type']) && !in_array($this->container['truck_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'truck_type', must be one of '%s'",
                $this->container['truck_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['price'] === null) {
            $invalidProperties[] = "'price' can't be null";
        }
        if ($this->container['price_standard'] === null) {
            $invalidProperties[] = "'price_standard' can't be null";
        }
        if ($this->container['pickup_on'] === null) {
            $invalidProperties[] = "'pickup_on' can't be null";
        }
        if ($this->container['pickup_at_from'] === null) {
            $invalidProperties[] = "'pickup_at_from' can't be null";
        }
        if ($this->container['pickup_at_until'] === null) {
            $invalidProperties[] = "'pickup_at_until' can't be null";
        }
        if ($this->container['runtime'] === null) {
            $invalidProperties[] = "'runtime' can't be null";
        }
        if ($this->container['delivery'] === null) {
            $invalidProperties[] = "'delivery' can't be null";
        }
        if ($this->container['cost_items'] === null) {
            $invalidProperties[] = "'cost_items' can't be null";
        }
        if ($this->container['co2_emission'] === null) {
            $invalidProperties[] = "'co2_emission' can't be null";
        }
        if ($this->container['reference'] === null) {
            $invalidProperties[] = "'reference' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The id of product.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets product
     *
     * @return string
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param string $product The product. Possible values: DIRECT, EXPRESS, EXPRESS_8, EXPRESS_10, EXPRESS_12, EXPRESS_16, FIX, FIX_8, FIX_10, FIX_12, FIX_16, STANDARD.
     *
     * @return self
     */
    public function setProduct($product)
    {
        if (is_null($product)) {
            throw new \InvalidArgumentException('non-nullable product cannot be null');
        }
        $allowedValues = $this->getProductAllowableValues();
        if (!in_array($product, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'product', must be one of '%s'",
                    $product,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets truck_type
     *
     * @return string|null
     */
    public function getTruckType()
    {
        return $this->container['truck_type'];
    }

    /**
     * Sets truck_type
     *
     * @param string|null $truck_type Truck type of order. Possible values DIRECT_BUS_PLANE, DIRECT_BUS_PLANE_XXL, DIRECT_TRUCK_7_5, DIRECT_TRUCK_12, DIRECT_TRUCK_40
     *
     * @return self
     */
    public function setTruckType($truck_type)
    {
        if (is_null($truck_type)) {
            throw new \InvalidArgumentException('non-nullable truck_type cannot be null');
        }
        $allowedValues = $this->getTruckTypeAllowableValues();
        if (!in_array($truck_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'truck_type', must be one of '%s'",
                    $truck_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['truck_type'] = $truck_type;

        return $this;
    }

    /**
     * Gets price
     *
     * @return \kruegge82\cargoboard\Model\Price
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param \kruegge82\cargoboard\Model\Price $price price
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            throw new \InvalidArgumentException('non-nullable price cannot be null');
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets price_standard
     *
     * @return \kruegge82\cargoboard\Model\Price
     */
    public function getPriceStandard()
    {
        return $this->container['price_standard'];
    }

    /**
     * Sets price_standard
     *
     * @param \kruegge82\cargoboard\Model\Price $price_standard price_standard
     *
     * @return self
     */
    public function setPriceStandard($price_standard)
    {
        if (is_null($price_standard)) {
            throw new \InvalidArgumentException('non-nullable price_standard cannot be null');
        }
        $this->container['price_standard'] = $price_standard;

        return $this;
    }

    /**
     * Gets pickup_on
     *
     * @return \DateTime
     */
    public function getPickupOn()
    {
        return $this->container['pickup_on'];
    }

    /**
     * Sets pickup_on
     *
     * @param \DateTime $pickup_on pickup_on
     *
     * @return self
     */
    public function setPickupOn($pickup_on)
    {
        if (is_null($pickup_on)) {
            throw new \InvalidArgumentException('non-nullable pickup_on cannot be null');
        }
        $this->container['pickup_on'] = $pickup_on;

        return $this;
    }

    /**
     * Gets pickup_at_from
     *
     * @return \DateTime
     */
    public function getPickupAtFrom()
    {
        return $this->container['pickup_at_from'];
    }

    /**
     * Sets pickup_at_from
     *
     * @param \DateTime $pickup_at_from pickup_at_from
     *
     * @return self
     */
    public function setPickupAtFrom($pickup_at_from)
    {
        if (is_null($pickup_at_from)) {
            throw new \InvalidArgumentException('non-nullable pickup_at_from cannot be null');
        }
        $this->container['pickup_at_from'] = $pickup_at_from;

        return $this;
    }

    /**
     * Gets pickup_at_until
     *
     * @return \DateTime
     */
    public function getPickupAtUntil()
    {
        return $this->container['pickup_at_until'];
    }

    /**
     * Sets pickup_at_until
     *
     * @param \DateTime $pickup_at_until pickup_at_until
     *
     * @return self
     */
    public function setPickupAtUntil($pickup_at_until)
    {
        if (is_null($pickup_at_until)) {
            throw new \InvalidArgumentException('non-nullable pickup_at_until cannot be null');
        }
        $this->container['pickup_at_until'] = $pickup_at_until;

        return $this;
    }

    /**
     * Gets runtime
     *
     * @return \kruegge82\cargoboard\Model\Runtime
     */
    public function getRuntime()
    {
        return $this->container['runtime'];
    }

    /**
     * Sets runtime
     *
     * @param \kruegge82\cargoboard\Model\Runtime $runtime runtime
     *
     * @return self
     */
    public function setRuntime($runtime)
    {
        if (is_null($runtime)) {
            throw new \InvalidArgumentException('non-nullable runtime cannot be null');
        }
        $this->container['runtime'] = $runtime;

        return $this;
    }

    /**
     * Gets delivery
     *
     * @return \kruegge82\cargoboard\Model\Delivery
     */
    public function getDelivery()
    {
        return $this->container['delivery'];
    }

    /**
     * Sets delivery
     *
     * @param \kruegge82\cargoboard\Model\Delivery $delivery delivery
     *
     * @return self
     */
    public function setDelivery($delivery)
    {
        if (is_null($delivery)) {
            throw new \InvalidArgumentException('non-nullable delivery cannot be null');
        }
        $this->container['delivery'] = $delivery;

        return $this;
    }

    /**
     * Gets cost_items
     *
     * @return \kruegge82\cargoboard\Model\CostItemProduct[]
     */
    public function getCostItems()
    {
        return $this->container['cost_items'];
    }

    /**
     * Sets cost_items
     *
     * @param \kruegge82\cargoboard\Model\CostItemProduct[] $cost_items cost_items
     *
     * @return self
     */
    public function setCostItems($cost_items)
    {
        if (is_null($cost_items)) {
            throw new \InvalidArgumentException('non-nullable cost_items cannot be null');
        }
        $this->container['cost_items'] = $cost_items;

        return $this;
    }

    /**
     * Gets co2_emission
     *
     * @return \kruegge82\cargoboard\Model\CO2Emission
     */
    public function getCo2Emission()
    {
        return $this->container['co2_emission'];
    }

    /**
     * Sets co2_emission
     *
     * @param \kruegge82\cargoboard\Model\CO2Emission $co2_emission CO2Emission details.
     *
     * @return self
     */
    public function setCo2Emission($co2_emission)
    {
        if (is_null($co2_emission)) {
            throw new \InvalidArgumentException('non-nullable co2_emission cannot be null');
        }
        $this->container['co2_emission'] = $co2_emission;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string $reference Reference of order.
     *
     * @return self
     */
    public function setReference($reference)
    {
        if (is_null($reference)) {
            throw new \InvalidArgumentException('non-nullable reference cannot be null');
        }
        $this->container['reference'] = $reference;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


