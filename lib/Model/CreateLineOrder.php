<?php
/**
 * CreateLineOrder
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  kruegge82\cargoboard
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Documentation
 *
 * &lt;h4&gt;Authentication.&lt;/h4&gt; &lt;p&gt;Authentication is done with X-API-KEY. You can request a key via mail to api@cargoboard.com.
 *
 * The version of the OpenAPI document: 1.0.5
 * Contact: api@cargoboard.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\cargoboard\Model;

use \ArrayAccess;
use \kruegge82\cargoboard\ObjectSerializer;

/**
 * CreateLineOrder Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\cargoboard
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateLineOrder implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreateLineOrder';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'content' => 'string',
        'unit_quantity' => 'int',
        'unit_package_type' => 'string',
        'unit_length' => 'int',
        'unit_width' => 'int',
        'unit_height' => 'int',
        'unit_weight' => 'float',
        'is_stackable' => 'bool',
        'wants_pallet_exchange' => 'bool',
        'additional_euro_pallets' => 'float',
        'dangerous_goods' => '\kruegge82\cargoboard\Model\DangerousGoodOrder[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'content' => null,
        'unit_quantity' => null,
        'unit_package_type' => null,
        'unit_length' => null,
        'unit_width' => null,
        'unit_height' => null,
        'unit_weight' => null,
        'is_stackable' => null,
        'wants_pallet_exchange' => null,
        'additional_euro_pallets' => null,
        'dangerous_goods' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'content' => false,
        'unit_quantity' => false,
        'unit_package_type' => false,
        'unit_length' => false,
        'unit_width' => false,
        'unit_height' => false,
        'unit_weight' => false,
        'is_stackable' => false,
        'wants_pallet_exchange' => false,
        'additional_euro_pallets' => false,
        'dangerous_goods' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'content' => 'content',
        'unit_quantity' => 'unitQuantity',
        'unit_package_type' => 'unitPackageType',
        'unit_length' => 'unitLength',
        'unit_width' => 'unitWidth',
        'unit_height' => 'unitHeight',
        'unit_weight' => 'unitWeight',
        'is_stackable' => 'isStackable',
        'wants_pallet_exchange' => 'wantsPalletExchange',
        'additional_euro_pallets' => 'additionalEuroPallets',
        'dangerous_goods' => 'dangerousGoods'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'content' => 'setContent',
        'unit_quantity' => 'setUnitQuantity',
        'unit_package_type' => 'setUnitPackageType',
        'unit_length' => 'setUnitLength',
        'unit_width' => 'setUnitWidth',
        'unit_height' => 'setUnitHeight',
        'unit_weight' => 'setUnitWeight',
        'is_stackable' => 'setIsStackable',
        'wants_pallet_exchange' => 'setWantsPalletExchange',
        'additional_euro_pallets' => 'setAdditionalEuroPallets',
        'dangerous_goods' => 'setDangerousGoods'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'content' => 'getContent',
        'unit_quantity' => 'getUnitQuantity',
        'unit_package_type' => 'getUnitPackageType',
        'unit_length' => 'getUnitLength',
        'unit_width' => 'getUnitWidth',
        'unit_height' => 'getUnitHeight',
        'unit_weight' => 'getUnitWeight',
        'is_stackable' => 'getIsStackable',
        'wants_pallet_exchange' => 'getWantsPalletExchange',
        'additional_euro_pallets' => 'getAdditionalEuroPallets',
        'dangerous_goods' => 'getDangerousGoods'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const UNIT_PACKAGE_TYPE_EP = 'EP';
    public const UNIT_PACKAGE_TYPE_FP = 'FP';
    public const UNIT_PACKAGE_TYPE_GB = 'GB';
    public const UNIT_PACKAGE_TYPE_KI = 'KI';
    public const UNIT_PACKAGE_TYPE_KT = 'KT';
    public const UNIT_PACKAGE_TYPE_PA = 'PA';
    public const UNIT_PACKAGE_TYPE_CC = 'CC';
    public const UNIT_PACKAGE_TYPE_DIRECT_PKW = 'DIRECT_PKW';
    public const UNIT_PACKAGE_TYPE_DIRECT_BUS = 'DIRECT_BUS';
    public const UNIT_PACKAGE_TYPE_DIRECT_BUS_PLANE = 'DIRECT_BUS_PLANE';
    public const UNIT_PACKAGE_TYPE_DIRECT_BUS_PLANE_TL = 'DIRECT_BUS_PLANE_TL';
    public const UNIT_PACKAGE_TYPE_DIRECT_BUS_PLANE_XXL = 'DIRECT_BUS_PLANE_XXL';
    public const UNIT_PACKAGE_TYPE_DIRECT_BUS_PLANE_XXL_TL = 'DIRECT_BUS_PLANE_XXL_TL';
    public const UNIT_PACKAGE_TYPE_DIRECT_TRUCK_7_5 = 'DIRECT_TRUCK_7_5';
    public const UNIT_PACKAGE_TYPE_DIRECT_TRUCK_12 = 'DIRECT_TRUCK_12';
    public const UNIT_PACKAGE_TYPE_DIRECT_TRUCK_40 = 'DIRECT_TRUCK_40';
    public const UNIT_PACKAGE_TYPE_DIRECT_BUS_TL = 'DIRECT_BUS_TL';
    public const UNIT_PACKAGE_TYPE_DIRECT_TRUCK_7_5_TL = 'DIRECT_TRUCK_7_5_TL';
    public const UNIT_PACKAGE_TYPE_DIRECT_TRUCK_12_TL = 'DIRECT_TRUCK_12_TL';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUnitPackageTypeAllowableValues()
    {
        return [
            self::UNIT_PACKAGE_TYPE_EP,
            self::UNIT_PACKAGE_TYPE_FP,
            self::UNIT_PACKAGE_TYPE_GB,
            self::UNIT_PACKAGE_TYPE_KI,
            self::UNIT_PACKAGE_TYPE_KT,
            self::UNIT_PACKAGE_TYPE_PA,
            self::UNIT_PACKAGE_TYPE_CC,
            self::UNIT_PACKAGE_TYPE_DIRECT_PKW,
            self::UNIT_PACKAGE_TYPE_DIRECT_BUS,
            self::UNIT_PACKAGE_TYPE_DIRECT_BUS_PLANE,
            self::UNIT_PACKAGE_TYPE_DIRECT_BUS_PLANE_TL,
            self::UNIT_PACKAGE_TYPE_DIRECT_BUS_PLANE_XXL,
            self::UNIT_PACKAGE_TYPE_DIRECT_BUS_PLANE_XXL_TL,
            self::UNIT_PACKAGE_TYPE_DIRECT_TRUCK_7_5,
            self::UNIT_PACKAGE_TYPE_DIRECT_TRUCK_12,
            self::UNIT_PACKAGE_TYPE_DIRECT_TRUCK_40,
            self::UNIT_PACKAGE_TYPE_DIRECT_BUS_TL,
            self::UNIT_PACKAGE_TYPE_DIRECT_TRUCK_7_5_TL,
            self::UNIT_PACKAGE_TYPE_DIRECT_TRUCK_12_TL,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('content', $data ?? [], null);
        $this->setIfExists('unit_quantity', $data ?? [], null);
        $this->setIfExists('unit_package_type', $data ?? [], null);
        $this->setIfExists('unit_length', $data ?? [], null);
        $this->setIfExists('unit_width', $data ?? [], null);
        $this->setIfExists('unit_height', $data ?? [], null);
        $this->setIfExists('unit_weight', $data ?? [], null);
        $this->setIfExists('is_stackable', $data ?? [], false);
        $this->setIfExists('wants_pallet_exchange', $data ?? [], false);
        $this->setIfExists('additional_euro_pallets', $data ?? [], null);
        $this->setIfExists('dangerous_goods', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['content'] === null) {
            $invalidProperties[] = "'content' can't be null";
        }
        if ($this->container['unit_quantity'] === null) {
            $invalidProperties[] = "'unit_quantity' can't be null";
        }
        if ($this->container['unit_package_type'] === null) {
            $invalidProperties[] = "'unit_package_type' can't be null";
        }
        $allowedValues = $this->getUnitPackageTypeAllowableValues();
        if (!is_null($this->container['unit_package_type']) && !in_array($this->container['unit_package_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'unit_package_type', must be one of '%s'",
                $this->container['unit_package_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['unit_length'] === null) {
            $invalidProperties[] = "'unit_length' can't be null";
        }
        if ($this->container['unit_width'] === null) {
            $invalidProperties[] = "'unit_width' can't be null";
        }
        if ($this->container['unit_height'] === null) {
            $invalidProperties[] = "'unit_height' can't be null";
        }
        if ($this->container['unit_weight'] === null) {
            $invalidProperties[] = "'unit_weight' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets content
     *
     * @return string
     */
    public function getContent()
    {
        return $this->container['content'];
    }

    /**
     * Sets content
     *
     * @param string $content Content for the line.
     *
     * @return self
     */
    public function setContent($content)
    {
        if (is_null($content)) {
            throw new \InvalidArgumentException('non-nullable content cannot be null');
        }
        $this->container['content'] = $content;

        return $this;
    }

    /**
     * Gets unit_quantity
     *
     * @return int
     */
    public function getUnitQuantity()
    {
        return $this->container['unit_quantity'];
    }

    /**
     * Sets unit_quantity
     *
     * @param int $unit_quantity Quantity for the line.
     *
     * @return self
     */
    public function setUnitQuantity($unit_quantity)
    {
        if (is_null($unit_quantity)) {
            throw new \InvalidArgumentException('non-nullable unit_quantity cannot be null');
        }
        $this->container['unit_quantity'] = $unit_quantity;

        return $this;
    }

    /**
     * Gets unit_package_type
     *
     * @return string
     */
    public function getUnitPackageType()
    {
        return $this->container['unit_package_type'];
    }

    /**
     * Sets unit_package_type
     *
     * @param string $unit_package_type PackageType for the line.
     *
     * @return self
     */
    public function setUnitPackageType($unit_package_type)
    {
        if (is_null($unit_package_type)) {
            throw new \InvalidArgumentException('non-nullable unit_package_type cannot be null');
        }
        $allowedValues = $this->getUnitPackageTypeAllowableValues();
        if (!in_array($unit_package_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'unit_package_type', must be one of '%s'",
                    $unit_package_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['unit_package_type'] = $unit_package_type;

        return $this;
    }

    /**
     * Gets unit_length
     *
     * @return int
     */
    public function getUnitLength()
    {
        return $this->container['unit_length'];
    }

    /**
     * Sets unit_length
     *
     * @param int $unit_length Length for the line.
     *
     * @return self
     */
    public function setUnitLength($unit_length)
    {
        if (is_null($unit_length)) {
            throw new \InvalidArgumentException('non-nullable unit_length cannot be null');
        }
        $this->container['unit_length'] = $unit_length;

        return $this;
    }

    /**
     * Gets unit_width
     *
     * @return int
     */
    public function getUnitWidth()
    {
        return $this->container['unit_width'];
    }

    /**
     * Sets unit_width
     *
     * @param int $unit_width Width for the line.
     *
     * @return self
     */
    public function setUnitWidth($unit_width)
    {
        if (is_null($unit_width)) {
            throw new \InvalidArgumentException('non-nullable unit_width cannot be null');
        }
        $this->container['unit_width'] = $unit_width;

        return $this;
    }

    /**
     * Gets unit_height
     *
     * @return int
     */
    public function getUnitHeight()
    {
        return $this->container['unit_height'];
    }

    /**
     * Sets unit_height
     *
     * @param int $unit_height Height for the line.
     *
     * @return self
     */
    public function setUnitHeight($unit_height)
    {
        if (is_null($unit_height)) {
            throw new \InvalidArgumentException('non-nullable unit_height cannot be null');
        }
        $this->container['unit_height'] = $unit_height;

        return $this;
    }

    /**
     * Gets unit_weight
     *
     * @return float
     */
    public function getUnitWeight()
    {
        return $this->container['unit_weight'];
    }

    /**
     * Sets unit_weight
     *
     * @param float $unit_weight Weight for the line.
     *
     * @return self
     */
    public function setUnitWeight($unit_weight)
    {
        if (is_null($unit_weight)) {
            throw new \InvalidArgumentException('non-nullable unit_weight cannot be null');
        }
        $this->container['unit_weight'] = $unit_weight;

        return $this;
    }

    /**
     * Gets is_stackable
     *
     * @return bool|null
     */
    public function getIsStackable()
    {
        return $this->container['is_stackable'];
    }

    /**
     * Sets is_stackable
     *
     * @param bool|null $is_stackable If set to true, packages are loadable and stackable.
     *
     * @return self
     */
    public function setIsStackable($is_stackable)
    {
        if (is_null($is_stackable)) {
            throw new \InvalidArgumentException('non-nullable is_stackable cannot be null');
        }
        $this->container['is_stackable'] = $is_stackable;

        return $this;
    }

    /**
     * Gets wants_pallet_exchange
     *
     * @return bool|null
     */
    public function getWantsPalletExchange()
    {
        return $this->container['wants_pallet_exchange'];
    }

    /**
     * Sets wants_pallet_exchange
     *
     * @param bool|null $wants_pallet_exchange If set to true, pallets exchange is required for a line.
     *
     * @return self
     */
    public function setWantsPalletExchange($wants_pallet_exchange)
    {
        if (is_null($wants_pallet_exchange)) {
            throw new \InvalidArgumentException('non-nullable wants_pallet_exchange cannot be null');
        }
        $this->container['wants_pallet_exchange'] = $wants_pallet_exchange;

        return $this;
    }

    /**
     * Gets additional_euro_pallets
     *
     * @return float|null
     */
    public function getAdditionalEuroPallets()
    {
        return $this->container['additional_euro_pallets'];
    }

    /**
     * Sets additional_euro_pallets
     *
     * @param float|null $additional_euro_pallets Additional euro Pallets for the line (e.g. as top or side protection).
     *
     * @return self
     */
    public function setAdditionalEuroPallets($additional_euro_pallets)
    {
        if (is_null($additional_euro_pallets)) {
            throw new \InvalidArgumentException('non-nullable additional_euro_pallets cannot be null');
        }
        $this->container['additional_euro_pallets'] = $additional_euro_pallets;

        return $this;
    }

    /**
     * Gets dangerous_goods
     *
     * @return \kruegge82\cargoboard\Model\DangerousGoodOrder[]|null
     */
    public function getDangerousGoods()
    {
        return $this->container['dangerous_goods'];
    }

    /**
     * Sets dangerous_goods
     *
     * @param \kruegge82\cargoboard\Model\DangerousGoodOrder[]|null $dangerous_goods Dangerous Goods for an order line.
     *
     * @return self
     */
    public function setDangerousGoods($dangerous_goods)
    {
        if (is_null($dangerous_goods)) {
            throw new \InvalidArgumentException('non-nullable dangerous_goods cannot be null');
        }
        $this->container['dangerous_goods'] = $dangerous_goods;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


