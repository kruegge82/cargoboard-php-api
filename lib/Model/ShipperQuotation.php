<?php
/**
 * ShipperQuotation
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  kruegge82\cargoboard
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Documentation
 *
 * &lt;h4&gt;Authentication.&lt;/h4&gt; &lt;p&gt;Authentication is done with X-API-KEY. You can request a key via mail to api@cargoboard.com.
 *
 * The version of the OpenAPI document: 1.0.5
 * Contact: api@cargoboard.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\cargoboard\Model;

use \ArrayAccess;
use \kruegge82\cargoboard\ObjectSerializer;

/**
 * ShipperQuotation Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\cargoboard
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ShipperQuotation implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ShipperQuotation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'contact_person' => '\kruegge82\cargoboard\Model\ContactPerson',
        'address' => '\kruegge82\cargoboard\Model\AddressQuotation',
        'neutral_data' => '\kruegge82\cargoboard\Model\NeutralData',
        'pickup_at_from' => '\DateTime',
        'pickup_at_until' => '\DateTime',
        'pickup_on' => '\DateTime',
        'wants_contact_before_pickup' => 'bool',
        'wants_phone_call_from_driver_before_pickup' => 'bool',
        'wants_tail_lift_truck' => 'bool',
        'loading_type' => 'string',
        'free_text_for_pickup' => 'string',
        'reference' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'contact_person' => null,
        'address' => null,
        'neutral_data' => null,
        'pickup_at_from' => 'date-time',
        'pickup_at_until' => 'date-time',
        'pickup_on' => 'date',
        'wants_contact_before_pickup' => null,
        'wants_phone_call_from_driver_before_pickup' => null,
        'wants_tail_lift_truck' => null,
        'loading_type' => null,
        'free_text_for_pickup' => null,
        'reference' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
        'contact_person' => false,
        'address' => false,
        'neutral_data' => false,
        'pickup_at_from' => false,
        'pickup_at_until' => false,
        'pickup_on' => false,
        'wants_contact_before_pickup' => false,
        'wants_phone_call_from_driver_before_pickup' => false,
        'wants_tail_lift_truck' => false,
        'loading_type' => false,
        'free_text_for_pickup' => false,
        'reference' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'contact_person' => 'contactPerson',
        'address' => 'address',
        'neutral_data' => 'neutralData',
        'pickup_at_from' => 'pickupAtFrom',
        'pickup_at_until' => 'pickupAtUntil',
        'pickup_on' => 'pickupOn',
        'wants_contact_before_pickup' => 'wantsContactBeforePickup',
        'wants_phone_call_from_driver_before_pickup' => 'wantsPhoneCallFromDriverBeforePickup',
        'wants_tail_lift_truck' => 'wantsTailLiftTruck',
        'loading_type' => 'loadingType',
        'free_text_for_pickup' => 'freeTextForPickup',
        'reference' => 'reference'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'contact_person' => 'setContactPerson',
        'address' => 'setAddress',
        'neutral_data' => 'setNeutralData',
        'pickup_at_from' => 'setPickupAtFrom',
        'pickup_at_until' => 'setPickupAtUntil',
        'pickup_on' => 'setPickupOn',
        'wants_contact_before_pickup' => 'setWantsContactBeforePickup',
        'wants_phone_call_from_driver_before_pickup' => 'setWantsPhoneCallFromDriverBeforePickup',
        'wants_tail_lift_truck' => 'setWantsTailLiftTruck',
        'loading_type' => 'setLoadingType',
        'free_text_for_pickup' => 'setFreeTextForPickup',
        'reference' => 'setReference'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'contact_person' => 'getContactPerson',
        'address' => 'getAddress',
        'neutral_data' => 'getNeutralData',
        'pickup_at_from' => 'getPickupAtFrom',
        'pickup_at_until' => 'getPickupAtUntil',
        'pickup_on' => 'getPickupOn',
        'wants_contact_before_pickup' => 'getWantsContactBeforePickup',
        'wants_phone_call_from_driver_before_pickup' => 'getWantsPhoneCallFromDriverBeforePickup',
        'wants_tail_lift_truck' => 'getWantsTailLiftTruck',
        'loading_type' => 'getLoadingType',
        'free_text_for_pickup' => 'getFreeTextForPickup',
        'reference' => 'getReference'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('contact_person', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('neutral_data', $data ?? [], null);
        $this->setIfExists('pickup_at_from', $data ?? [], null);
        $this->setIfExists('pickup_at_until', $data ?? [], null);
        $this->setIfExists('pickup_on', $data ?? [], null);
        $this->setIfExists('wants_contact_before_pickup', $data ?? [], null);
        $this->setIfExists('wants_phone_call_from_driver_before_pickup', $data ?? [], null);
        $this->setIfExists('wants_tail_lift_truck', $data ?? [], null);
        $this->setIfExists('loading_type', $data ?? [], null);
        $this->setIfExists('free_text_for_pickup', $data ?? [], null);
        $this->setIfExists('reference', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['address'] === null) {
            $invalidProperties[] = "'address' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets contact_person
     *
     * @return \kruegge82\cargoboard\Model\ContactPerson|null
     */
    public function getContactPerson()
    {
        return $this->container['contact_person'];
    }

    /**
     * Sets contact_person
     *
     * @param \kruegge82\cargoboard\Model\ContactPerson|null $contact_person contact_person
     *
     * @return self
     */
    public function setContactPerson($contact_person)
    {
        if (is_null($contact_person)) {
            throw new \InvalidArgumentException('non-nullable contact_person cannot be null');
        }
        $this->container['contact_person'] = $contact_person;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \kruegge82\cargoboard\Model\AddressQuotation
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \kruegge82\cargoboard\Model\AddressQuotation $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets neutral_data
     *
     * @return \kruegge82\cargoboard\Model\NeutralData|null
     */
    public function getNeutralData()
    {
        return $this->container['neutral_data'];
    }

    /**
     * Sets neutral_data
     *
     * @param \kruegge82\cargoboard\Model\NeutralData|null $neutral_data Neutral data for obfuscation.
     *
     * @return self
     */
    public function setNeutralData($neutral_data)
    {
        if (is_null($neutral_data)) {
            throw new \InvalidArgumentException('non-nullable neutral_data cannot be null');
        }
        $this->container['neutral_data'] = $neutral_data;

        return $this;
    }

    /**
     * Gets pickup_at_from
     *
     * @return \DateTime|null
     */
    public function getPickupAtFrom()
    {
        return $this->container['pickup_at_from'];
    }

    /**
     * Sets pickup_at_from
     *
     * @param \DateTime|null $pickup_at_from Date with time of start of pickup for the product. Allowed days are days from Monday till Friday. Either pickupOn or pickupAtFrom and pickupAtUntil is enough to be set. If value of pickupOn and pickupAtFrom and pickupAtUntil is set, date part (a day) must be the same.
     *
     * @return self
     */
    public function setPickupAtFrom($pickup_at_from)
    {
        if (is_null($pickup_at_from)) {
            throw new \InvalidArgumentException('non-nullable pickup_at_from cannot be null');
        }
        $this->container['pickup_at_from'] = $pickup_at_from;

        return $this;
    }

    /**
     * Gets pickup_at_until
     *
     * @return \DateTime|null
     */
    public function getPickupAtUntil()
    {
        return $this->container['pickup_at_until'];
    }

    /**
     * Sets pickup_at_until
     *
     * @param \DateTime|null $pickup_at_until Date with time of end of pickup for the product. Allowed days are days from Monday till Friday. Either pickupOn or pickupAtFrom and pickupAtUntil is enough to be set. If value of pickupOn and pickupAtFrom and pickupAtUntil is set, date part (a day) must be the same.
     *
     * @return self
     */
    public function setPickupAtUntil($pickup_at_until)
    {
        if (is_null($pickup_at_until)) {
            throw new \InvalidArgumentException('non-nullable pickup_at_until cannot be null');
        }
        $this->container['pickup_at_until'] = $pickup_at_until;

        return $this;
    }

    /**
     * Gets pickup_on
     *
     * @return \DateTime|null
     */
    public function getPickupOn()
    {
        return $this->container['pickup_on'];
    }

    /**
     * Sets pickup_on
     *
     * @param \DateTime|null $pickup_on Date without time of pickup for the product. Allowed days are days from Monday till Friday. Either pickupOn or pickupAtFrom and pickupAtUntil is enough to be set. If value of pickupOn and pickupAtFrom and pickupAtUntil is set, date part (a day) must be the same.
     *
     * @return self
     */
    public function setPickupOn($pickup_on)
    {
        if (is_null($pickup_on)) {
            throw new \InvalidArgumentException('non-nullable pickup_on cannot be null');
        }
        $this->container['pickup_on'] = $pickup_on;

        return $this;
    }

    /**
     * Gets wants_contact_before_pickup
     *
     * @return bool|null
     */
    public function getWantsContactBeforePickup()
    {
        return $this->container['wants_contact_before_pickup'];
    }

    /**
     * Sets wants_contact_before_pickup
     *
     * @param bool|null $wants_contact_before_pickup A service where a Logistic Company contacts the customer by phone days/hours before the pickup and arranges an appointment for the pickup. This is often booked when a customer is not on site every time and needs an exact time.
     *
     * @return self
     */
    public function setWantsContactBeforePickup($wants_contact_before_pickup)
    {
        if (is_null($wants_contact_before_pickup)) {
            throw new \InvalidArgumentException('non-nullable wants_contact_before_pickup cannot be null');
        }
        $this->container['wants_contact_before_pickup'] = $wants_contact_before_pickup;

        return $this;
    }

    /**
     * Gets wants_phone_call_from_driver_before_pickup
     *
     * @return bool|null
     */
    public function getWantsPhoneCallFromDriverBeforePickup()
    {
        return $this->container['wants_phone_call_from_driver_before_pickup'];
    }

    /**
     * Sets wants_phone_call_from_driver_before_pickup
     *
     * @param bool|null $wants_phone_call_from_driver_before_pickup A service where a Logistic Company contacts the customer by phone about 30 - 60 minutes before pickup at the customer location to pickup the shipment.
     *
     * @return self
     */
    public function setWantsPhoneCallFromDriverBeforePickup($wants_phone_call_from_driver_before_pickup)
    {
        if (is_null($wants_phone_call_from_driver_before_pickup)) {
            throw new \InvalidArgumentException('non-nullable wants_phone_call_from_driver_before_pickup cannot be null');
        }
        $this->container['wants_phone_call_from_driver_before_pickup'] = $wants_phone_call_from_driver_before_pickup;

        return $this;
    }

    /**
     * Gets wants_tail_lift_truck
     *
     * @return bool|null
     */
    public function getWantsTailLiftTruck()
    {
        return $this->container['wants_tail_lift_truck'];
    }

    /**
     * Sets wants_tail_lift_truck
     *
     * @param bool|null $wants_tail_lift_truck Wants Tail Lift Truck.
     *
     * @return self
     */
    public function setWantsTailLiftTruck($wants_tail_lift_truck)
    {
        if (is_null($wants_tail_lift_truck)) {
            throw new \InvalidArgumentException('non-nullable wants_tail_lift_truck cannot be null');
        }
        $this->container['wants_tail_lift_truck'] = $wants_tail_lift_truck;

        return $this;
    }

    /**
     * Gets loading_type
     *
     * @return string|null
     */
    public function getLoadingType()
    {
        return $this->container['loading_type'];
    }

    /**
     * Sets loading_type
     *
     * @param string|null $loading_type Loading type (collection). Possible values RAMP, SIDE, CRANE, LIFTING_PLATFORM_OR_TAIL_LIFT_TRUCK
     *
     * @return self
     */
    public function setLoadingType($loading_type)
    {
        if (is_null($loading_type)) {
            throw new \InvalidArgumentException('non-nullable loading_type cannot be null');
        }
        $this->container['loading_type'] = $loading_type;

        return $this;
    }

    /**
     * Gets free_text_for_pickup
     *
     * @return string|null
     */
    public function getFreeTextForPickup()
    {
        return $this->container['free_text_for_pickup'];
    }

    /**
     * Sets free_text_for_pickup
     *
     * @param string|null $free_text_for_pickup free_text_for_pickup
     *
     * @return self
     */
    public function setFreeTextForPickup($free_text_for_pickup)
    {
        if (is_null($free_text_for_pickup)) {
            throw new \InvalidArgumentException('non-nullable free_text_for_pickup cannot be null');
        }
        $this->container['free_text_for_pickup'] = $free_text_for_pickup;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string|null
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string|null $reference reference
     *
     * @return self
     */
    public function setReference($reference)
    {
        if (is_null($reference)) {
            throw new \InvalidArgumentException('non-nullable reference cannot be null');
        }
        $this->container['reference'] = $reference;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


