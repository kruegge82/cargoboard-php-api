<?php
/**
 * TrackingStatus
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  kruegge82\cargoboard
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Documentation
 *
 * &lt;h4&gt;Authentication.&lt;/h4&gt; &lt;p&gt;Authentication is done with X-API-KEY. You can request a key via mail to api@cargoboard.com.
 *
 * The version of the OpenAPI document: 1.0.5
 * Contact: api@cargoboard.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\cargoboard\Model;

use \ArrayAccess;
use \kruegge82\cargoboard\ObjectSerializer;

/**
 * TrackingStatus Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\cargoboard
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TrackingStatus implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TrackingStatus';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'originated_at' => '\DateTime',
        'code' => 'string',
        'message' => 'string',
        'waiting_minutes' => 'float',
        'emitted_by' => 'string',
        'name_of_signer' => 'string',
        'vehicle_latitude' => 'float',
        'vehicle_longitude' => 'float',
        'estimated_collection_at_from' => '\DateTime',
        'estimated_collection_at_until' => '\DateTime',
        'estimated_arrival_at_from' => '\DateTime',
        'estimated_arrival_at_until' => '\DateTime',
        'stops_until_collection' => 'float',
        'stops_until_delivery' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'originated_at' => 'date-time',
        'code' => null,
        'message' => null,
        'waiting_minutes' => null,
        'emitted_by' => null,
        'name_of_signer' => null,
        'vehicle_latitude' => null,
        'vehicle_longitude' => null,
        'estimated_collection_at_from' => 'date-time',
        'estimated_collection_at_until' => 'date-time',
        'estimated_arrival_at_from' => 'date-time',
        'estimated_arrival_at_until' => 'date-time',
        'stops_until_collection' => null,
        'stops_until_delivery' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'originated_at' => false,
        'code' => false,
        'message' => false,
        'waiting_minutes' => false,
        'emitted_by' => false,
        'name_of_signer' => false,
        'vehicle_latitude' => false,
        'vehicle_longitude' => false,
        'estimated_collection_at_from' => false,
        'estimated_collection_at_until' => false,
        'estimated_arrival_at_from' => false,
        'estimated_arrival_at_until' => false,
        'stops_until_collection' => false,
        'stops_until_delivery' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'originated_at' => 'originatedAt',
        'code' => 'code',
        'message' => 'message',
        'waiting_minutes' => 'waitingMinutes',
        'emitted_by' => 'emittedBy',
        'name_of_signer' => 'nameOfSigner',
        'vehicle_latitude' => 'vehicleLatitude',
        'vehicle_longitude' => 'vehicleLongitude',
        'estimated_collection_at_from' => 'estimatedCollectionAtFrom',
        'estimated_collection_at_until' => 'estimatedCollectionAtUntil',
        'estimated_arrival_at_from' => 'estimatedArrivalAtFrom',
        'estimated_arrival_at_until' => 'estimatedArrivalAtUntil',
        'stops_until_collection' => 'stopsUntilCollection',
        'stops_until_delivery' => 'stopsUntilDelivery'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'originated_at' => 'setOriginatedAt',
        'code' => 'setCode',
        'message' => 'setMessage',
        'waiting_minutes' => 'setWaitingMinutes',
        'emitted_by' => 'setEmittedBy',
        'name_of_signer' => 'setNameOfSigner',
        'vehicle_latitude' => 'setVehicleLatitude',
        'vehicle_longitude' => 'setVehicleLongitude',
        'estimated_collection_at_from' => 'setEstimatedCollectionAtFrom',
        'estimated_collection_at_until' => 'setEstimatedCollectionAtUntil',
        'estimated_arrival_at_from' => 'setEstimatedArrivalAtFrom',
        'estimated_arrival_at_until' => 'setEstimatedArrivalAtUntil',
        'stops_until_collection' => 'setStopsUntilCollection',
        'stops_until_delivery' => 'setStopsUntilDelivery'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'originated_at' => 'getOriginatedAt',
        'code' => 'getCode',
        'message' => 'getMessage',
        'waiting_minutes' => 'getWaitingMinutes',
        'emitted_by' => 'getEmittedBy',
        'name_of_signer' => 'getNameOfSigner',
        'vehicle_latitude' => 'getVehicleLatitude',
        'vehicle_longitude' => 'getVehicleLongitude',
        'estimated_collection_at_from' => 'getEstimatedCollectionAtFrom',
        'estimated_collection_at_until' => 'getEstimatedCollectionAtUntil',
        'estimated_arrival_at_from' => 'getEstimatedArrivalAtFrom',
        'estimated_arrival_at_until' => 'getEstimatedArrivalAtUntil',
        'stops_until_collection' => 'getStopsUntilCollection',
        'stops_until_delivery' => 'getStopsUntilDelivery'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const CODE__5_X0 = '5X0';
    public const CODE__1 = '-1';
    public const CODE__00 = '00';
    public const CODE__01 = '01';
    public const CODE__02 = '02';
    public const CODE__03 = '03';
    public const CODE__04 = '04';
    public const CODE__05 = '05';
    public const CODE__06 = '06';
    public const CODE__07 = '07';
    public const CODE__08 = '08';
    public const CODE__10 = '10';
    public const CODE__14 = '14';
    public const CODE__16 = '16';
    public const CODE__17 = '17';
    public const CODE__20 = '20';
    public const CODE__21 = '21';
    public const CODE__22 = '22';
    public const CODE__28 = '28';
    public const CODE__29 = '29';
    public const CODE__30 = '30';
    public const CODE__33 = '33';
    public const CODE__35 = '35';
    public const CODE__36 = '36';
    public const CODE__37 = '37';
    public const CODE__38 = '38';
    public const CODE__39 = '39';
    public const CODE__40 = '40';
    public const CODE__49 = '49';
    public const CODE__50 = '50';
    public const CODE__51 = '51';
    public const CODE__52 = '52';
    public const CODE__54 = '54';
    public const CODE__57 = '57';
    public const CODE__60 = '60';
    public const CODE__61 = '61';
    public const CODE__62 = '62';
    public const CODE__63 = '63';
    public const CODE__65 = '65';
    public const CODE__67 = '67';
    public const CODE__68 = '68';
    public const CODE__70 = '70';
    public const CODE__80 = '80';
    public const CODE__81 = '81';
    public const CODE__91 = '91';
    public const CODE__92 = '92';
    public const CODE__93 = '93';
    public const CODE__95 = '95';
    public const CODE__98 = '98';
    public const CODE__99 = '99';
    public const CODE__100 = '100';
    public const CODE__300 = '300';
    public const CODE__301 = '301';
    public const CODE__302 = '302';
    public const CODE__303 = '303';
    public const CODE__304 = '304';
    public const CODE__305 = '305';
    public const CODE__400 = '400';
    public const CODE__401 = '401';
    public const CODE__410 = '410';
    public const CODE__411 = '411';
    public const CODE__420 = '420';
    public const CODE__421 = '421';
    public const CODE__422 = '422';
    public const CODE__423 = '423';
    public const CODE__424 = '424';
    public const CODE__430 = '430';
    public const CODE__431 = '431';
    public const CODE__432 = '432';
    public const CODE__433 = '433';
    public const CODE__434 = '434';
    public const CODE__442 = '442';
    public const CODE__453 = '453';
    public const CODE__470 = '470';
    public const CODE__471 = '471';
    public const CODE__472 = '472';
    public const CODE__473 = '473';
    public const CODE__474 = '474';
    public const CODE__500 = '500';
    public const CODE__510 = '510';
    public const CODE__521 = '521';
    public const CODE__522 = '522';
    public const CODE__523 = '523';
    public const CODE__526 = '526';
    public const CODE__527 = '527';
    public const CODE__528 = '528';
    public const CODE__529 = '529';
    public const CODE__533 = '533';
    public const CODE__540 = '540';
    public const CODE__549 = '549';
    public const CODE__550 = '550';
    public const CODE__552 = '552';
    public const CODE__570 = '570';
    public const CODE__571 = '571';
    public const CODE__618 = '618';
    public const CODE__619 = '619';
    public const CODE__620 = '620';
    public const CODE__621 = '621';
    public const CODE__622 = '622';
    public const CODE__623 = '623';
    public const CODE__624 = '624';
    public const CODE__625 = '625';
    public const CODE__626 = '626';
    public const CODE__627 = '627';
    public const CODE__628 = '628';
    public const CODE__632 = '632';
    public const CODE__633 = '633';
    public const CODE__634 = '634';
    public const CODE__636 = '636';
    public const CODE__637 = '637';
    public const CODE__638 = '638';
    public const CODE__640 = '640';
    public const CODE__641 = '641';
    public const CODE__644 = '644';
    public const CODE__645 = '645';
    public const CODE__646 = '646';
    public const CODE__647 = '647';
    public const CODE__648 = '648';
    public const CODE__649 = '649';
    public const CODE__650 = '650';
    public const CODE__651 = '651';
    public const CODE__652 = '652';
    public const CODE__654 = '654';
    public const CODE__655 = '655';
    public const CODE__656 = '656';
    public const CODE__657 = '657';
    public const CODE__658 = '658';
    public const CODE__659 = '659';
    public const CODE__660 = '660';
    public const CODE__661 = '661';
    public const CODE__663 = '663';
    public const CODE__664 = '664';
    public const CODE__665 = '665';
    public const CODE__666 = '666';
    public const CODE__667 = '667';
    public const CODE__668 = '668';
    public const CODE__669 = '669';
    public const CODE__670 = '670';
    public const CODE__672 = '672';
    public const CODE__674 = '674';
    public const CODE__679 = '679';
    public const CODE__681 = '681';
    public const CODE__682 = '682';
    public const CODE__683 = '683';
    public const CODE__684 = '684';
    public const CODE__685 = '685';
    public const CODE__686 = '686';
    public const CODE__687 = '687';
    public const CODE__688 = '688';
    public const CODE__689 = '689';
    public const CODE__690 = '690';
    public const CODE__691 = '691';
    public const CODE__692 = '692';
    public const CODE__693 = '693';
    public const CODE__694 = '694';
    public const CODE__695 = '695';
    public const CODE__696 = '696';
    public const CODE__697 = '697';
    public const CODE__698 = '698';
    public const CODE__699 = '699';
    public const CODE__701 = '701';
    public const CODE__702 = '702';
    public const CODE__703 = '703';
    public const CODE__704 = '704';
    public const CODE__705 = '705';
    public const CODE__706 = '706';
    public const CODE__707 = '707';
    public const CODE__708 = '708';
    public const CODE__709 = '709';
    public const CODE__710 = '710';
    public const CODE__711 = '711';
    public const CODE__712 = '712';
    public const CODE__713 = '713';
    public const CODE__714 = '714';
    public const CODE__715 = '715';
    public const CODE__716 = '716';
    public const CODE__717 = '717';
    public const CODE__718 = '718';
    public const CODE__719 = '719';
    public const CODE__720 = '720';
    public const CODE__721 = '721';
    public const CODE__722 = '722';
    public const CODE__723 = '723';
    public const CODE__724 = '724';
    public const CODE__725 = '725';
    public const CODE__726 = '726';
    public const CODE__727 = '727';
    public const CODE__728 = '728';
    public const CODE__729 = '729';
    public const CODE__730 = '730';
    public const CODE__731 = '731';
    public const CODE__732 = '732';
    public const CODE__733 = '733';
    public const CODE__734 = '734';
    public const CODE__735 = '735';
    public const CODE__736 = '736';
    public const CODE__737 = '737';
    public const CODE__738 = '738';
    public const CODE__739 = '739';
    public const CODE__740 = '740';
    public const CODE__741 = '741';
    public const CODE__742 = '742';
    public const CODE__743 = '743';
    public const CODE__744 = '744';
    public const CODE__745 = '745';
    public const CODE__746 = '746';
    public const CODE__747 = '747';
    public const CODE__748 = '748';
    public const CODE__749 = '749';
    public const CODE__750 = '750';
    public const CODE__751 = '751';
    public const CODE__752 = '752';
    public const CODE__753 = '753';
    public const CODE__754 = '754';
    public const CODE__755 = '755';
    public const CODE__756 = '756';
    public const CODE__761 = '761';
    public const CODE__762 = '762';
    public const CODE__763 = '763';
    public const CODE__764 = '764';
    public const CODE__765 = '765';
    public const CODE__766 = '766';
    public const CODE__767 = '767';
    public const CODE__768 = '768';
    public const CODE__769 = '769';
    public const CODE__770 = '770';
    public const CODE__771 = '771';
    public const CODE__772 = '772';
    public const CODE__773 = '773';
    public const CODE__774 = '774';
    public const CODE__775 = '775';
    public const CODE__776 = '776';
    public const CODE__777 = '777';
    public const CODE__778 = '778';
    public const CODE__779 = '779';
    public const CODE__780 = '780';
    public const CODE__781 = '781';
    public const CODE__783 = '783';
    public const CODE__785 = '785';
    public const CODE__787 = '787';
    public const CODE__789 = '789';
    public const CODE__790 = '790';
    public const CODE__791 = '791';
    public const CODE__792 = '792';
    public const CODE__793 = '793';
    public const CODE__794 = '794';
    public const CODE__795 = '795';
    public const CODE__796 = '796';
    public const CODE__797 = '797';
    public const CODE__798 = '798';
    public const CODE__799 = '799';
    public const CODE__800 = '800';
    public const CODE__801 = '801';
    public const CODE__802 = '802';
    public const CODE__803 = '803';
    public const CODE__804 = '804';
    public const CODE__805 = '805';
    public const CODE__806 = '806';
    public const CODE__807 = '807';
    public const CODE__808 = '808';
    public const CODE__809 = '809';
    public const CODE__810 = '810';
    public const CODE__811 = '811';
    public const CODE__812 = '812';
    public const CODE__813 = '813';
    public const CODE__814 = '814';
    public const CODE__815 = '815';
    public const CODE__816 = '816';
    public const CODE__817 = '817';
    public const CODE__818 = '818';
    public const CODE__819 = '819';
    public const CODE__820 = '820';
    public const CODE__821 = '821';
    public const CODE__822 = '822';
    public const CODE__823 = '823';
    public const CODE__824 = '824';
    public const CODE__825 = '825';
    public const CODE__826 = '826';
    public const CODE__827 = '827';
    public const CODE__828 = '828';
    public const CODE__829 = '829';
    public const CODE__830 = '830';
    public const CODE__831 = '831';
    public const CODE__832 = '832';
    public const CODE__833 = '833';
    public const CODE__834 = '834';
    public const CODE__835 = '835';
    public const CODE__836 = '836';
    public const CODE__837 = '837';
    public const CODE__838 = '838';
    public const CODE__839 = '839';
    public const CODE__840 = '840';
    public const CODE__841 = '841';
    public const CODE__842 = '842';
    public const CODE__843 = '843';
    public const CODE__844 = '844';
    public const CODE__845 = '845';
    public const CODE__846 = '846';
    public const CODE__847 = '847';
    public const CODE__848 = '848';
    public const CODE__849 = '849';
    public const CODE__850 = '850';
    public const CODE__851 = '851';
    public const CODE__852 = '852';
    public const CODE__853 = '853';
    public const CODE__854 = '854';
    public const CODE__855 = '855';
    public const CODE__856 = '856';
    public const CODE__857 = '857';
    public const CODE__858 = '858';
    public const CODE__859 = '859';
    public const CODE__860 = '860';
    public const CODE__861 = '861';
    public const CODE__862 = '862';
    public const CODE__863 = '863';
    public const CODE__864 = '864';
    public const CODE__865 = '865';
    public const CODE__866 = '866';
    public const CODE__867 = '867';
    public const CODE__868 = '868';
    public const CODE__869 = '869';
    public const CODE__870 = '870';
    public const CODE__871 = '871';
    public const CODE__872 = '872';
    public const CODE__873 = '873';
    public const CODE__874 = '874';
    public const CODE__875 = '875';
    public const CODE__876 = '876';
    public const CODE__877 = '877';
    public const CODE__878 = '878';
    public const CODE__879 = '879';
    public const CODE__880 = '880';
    public const CODE__881 = '881';
    public const CODE__882 = '882';
    public const CODE__883 = '883';
    public const CODE__884 = '884';
    public const CODE__885 = '885';
    public const CODE__886 = '886';
    public const CODE__887 = '887';
    public const CODE__888 = '888';
    public const CODE__889 = '889';
    public const CODE__890 = '890';
    public const CODE__891 = '891';
    public const CODE__892 = '892';
    public const CODE__893 = '893';
    public const CODE__894 = '894';
    public const CODE__895 = '895';
    public const CODE__896 = '896';
    public const CODE__897 = '897';
    public const CODE__898 = '898';
    public const CODE__899 = '899';
    public const CODE__900 = '900';
    public const CODE__901 = '901';
    public const CODE__902 = '902';
    public const CODE__903 = '903';
    public const CODE__904 = '904';
    public const CODE__905 = '905';
    public const CODE__906 = '906';
    public const CODE__907 = '907';
    public const CODE__908 = '908';
    public const CODE__909 = '909';
    public const CODE__910 = '910';
    public const CODE__911 = '911';
    public const CODE__912 = '912';
    public const CODE__913 = '913';
    public const CODE__914 = '914';
    public const CODE__915 = '915';
    public const CODE__916 = '916';
    public const CODE__917 = '917';
    public const CODE__918 = '918';
    public const CODE__919 = '919';
    public const CODE__920 = '920';
    public const CODE__921 = '921';
    public const CODE__922 = '922';
    public const CODE__923 = '923';
    public const CODE__924 = '924';
    public const CODE__925 = '925';
    public const CODE__926 = '926';
    public const CODE__927 = '927';
    public const CODE__928 = '928';
    public const CODE__929 = '929';
    public const CODE__930 = '930';
    public const CODE__931 = '931';
    public const CODE__932 = '932';
    public const CODE__933 = '933';
    public const CODE__934 = '934';
    public const CODE__935 = '935';
    public const CODE__936 = '936';
    public const CODE__937 = '937';
    public const CODE__938 = '938';
    public const CODE__939 = '939';
    public const CODE__940 = '940';
    public const CODE__941 = '941';
    public const CODE__942 = '942';
    public const CODE__943 = '943';
    public const CODE__944 = '944';
    public const CODE__945 = '945';
    public const CODE__946 = '946';
    public const CODE__947 = '947';
    public const CODE__948 = '948';
    public const CODE__949 = '949';
    public const CODE__950 = '950';
    public const CODE__951 = '951';
    public const CODE__952 = '952';
    public const CODE__953 = '953';
    public const CODE__954 = '954';
    public const CODE__955 = '955';
    public const CODE__956 = '956';
    public const CODE__957 = '957';
    public const CODE__958 = '958';
    public const CODE__959 = '959';
    public const CODE__960 = '960';
    public const CODE__961 = '961';
    public const CODE__962 = '962';
    public const CODE__963 = '963';
    public const CODE__964 = '964';
    public const CODE__965 = '965';
    public const CODE__966 = '966';
    public const CODE__967 = '967';
    public const CODE__968 = '968';
    public const CODE__969 = '969';
    public const CODE__970 = '970';
    public const CODE__971 = '971';
    public const CODE__972 = '972';
    public const CODE__973 = '973';
    public const CODE__974 = '974';
    public const CODE__975 = '975';
    public const CODE__976 = '976';
    public const CODE__977 = '977';
    public const CODE__978 = '978';
    public const CODE__979 = '979';
    public const CODE__980 = '980';
    public const CODE__981 = '981';
    public const CODE__982 = '982';
    public const CODE__983 = '983';
    public const CODE__984 = '984';
    public const CODE__985 = '985';
    public const CODE__986 = '986';
    public const CODE__987 = '987';
    public const CODE__988 = '988';
    public const CODE__989 = '989';
    public const CODE__990 = '990';
    public const CODE__991 = '991';
    public const CODE__992 = '992';
    public const CODE__993 = '993';
    public const CODE__994 = '994';
    public const CODE__995 = '995';
    public const CODE__996 = '996';
    public const CODE__997 = '997';
    public const CODE__998 = '998';
    public const CODE__999 = '999';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCodeAllowableValues()
    {
        return [
            self::CODE__5_X0,
            self::CODE__1,
            self::CODE__00,
            self::CODE__01,
            self::CODE__02,
            self::CODE__03,
            self::CODE__04,
            self::CODE__05,
            self::CODE__06,
            self::CODE__07,
            self::CODE__08,
            self::CODE__10,
            self::CODE__14,
            self::CODE__16,
            self::CODE__17,
            self::CODE__20,
            self::CODE__21,
            self::CODE__22,
            self::CODE__28,
            self::CODE__29,
            self::CODE__30,
            self::CODE__33,
            self::CODE__35,
            self::CODE__36,
            self::CODE__37,
            self::CODE__38,
            self::CODE__39,
            self::CODE__40,
            self::CODE__49,
            self::CODE__50,
            self::CODE__51,
            self::CODE__52,
            self::CODE__54,
            self::CODE__57,
            self::CODE__60,
            self::CODE__61,
            self::CODE__62,
            self::CODE__63,
            self::CODE__65,
            self::CODE__67,
            self::CODE__68,
            self::CODE__70,
            self::CODE__80,
            self::CODE__81,
            self::CODE__91,
            self::CODE__92,
            self::CODE__93,
            self::CODE__95,
            self::CODE__98,
            self::CODE__99,
            self::CODE__100,
            self::CODE__300,
            self::CODE__301,
            self::CODE__302,
            self::CODE__303,
            self::CODE__304,
            self::CODE__305,
            self::CODE__400,
            self::CODE__401,
            self::CODE__410,
            self::CODE__411,
            self::CODE__420,
            self::CODE__421,
            self::CODE__422,
            self::CODE__423,
            self::CODE__424,
            self::CODE__430,
            self::CODE__431,
            self::CODE__432,
            self::CODE__433,
            self::CODE__434,
            self::CODE__442,
            self::CODE__453,
            self::CODE__470,
            self::CODE__471,
            self::CODE__472,
            self::CODE__473,
            self::CODE__474,
            self::CODE__500,
            self::CODE__510,
            self::CODE__521,
            self::CODE__522,
            self::CODE__523,
            self::CODE__526,
            self::CODE__527,
            self::CODE__528,
            self::CODE__529,
            self::CODE__533,
            self::CODE__540,
            self::CODE__549,
            self::CODE__550,
            self::CODE__552,
            self::CODE__570,
            self::CODE__571,
            self::CODE__618,
            self::CODE__619,
            self::CODE__620,
            self::CODE__621,
            self::CODE__622,
            self::CODE__623,
            self::CODE__624,
            self::CODE__625,
            self::CODE__626,
            self::CODE__627,
            self::CODE__628,
            self::CODE__632,
            self::CODE__633,
            self::CODE__634,
            self::CODE__636,
            self::CODE__637,
            self::CODE__638,
            self::CODE__640,
            self::CODE__641,
            self::CODE__644,
            self::CODE__645,
            self::CODE__646,
            self::CODE__647,
            self::CODE__648,
            self::CODE__649,
            self::CODE__650,
            self::CODE__651,
            self::CODE__652,
            self::CODE__654,
            self::CODE__655,
            self::CODE__656,
            self::CODE__657,
            self::CODE__658,
            self::CODE__659,
            self::CODE__660,
            self::CODE__661,
            self::CODE__663,
            self::CODE__664,
            self::CODE__665,
            self::CODE__666,
            self::CODE__667,
            self::CODE__668,
            self::CODE__669,
            self::CODE__670,
            self::CODE__672,
            self::CODE__674,
            self::CODE__679,
            self::CODE__681,
            self::CODE__682,
            self::CODE__683,
            self::CODE__684,
            self::CODE__685,
            self::CODE__686,
            self::CODE__687,
            self::CODE__688,
            self::CODE__689,
            self::CODE__690,
            self::CODE__691,
            self::CODE__692,
            self::CODE__693,
            self::CODE__694,
            self::CODE__695,
            self::CODE__696,
            self::CODE__697,
            self::CODE__698,
            self::CODE__699,
            self::CODE__701,
            self::CODE__702,
            self::CODE__703,
            self::CODE__704,
            self::CODE__705,
            self::CODE__706,
            self::CODE__707,
            self::CODE__708,
            self::CODE__709,
            self::CODE__710,
            self::CODE__711,
            self::CODE__712,
            self::CODE__713,
            self::CODE__714,
            self::CODE__715,
            self::CODE__716,
            self::CODE__717,
            self::CODE__718,
            self::CODE__719,
            self::CODE__720,
            self::CODE__721,
            self::CODE__722,
            self::CODE__723,
            self::CODE__724,
            self::CODE__725,
            self::CODE__726,
            self::CODE__727,
            self::CODE__728,
            self::CODE__729,
            self::CODE__730,
            self::CODE__731,
            self::CODE__732,
            self::CODE__733,
            self::CODE__734,
            self::CODE__735,
            self::CODE__736,
            self::CODE__737,
            self::CODE__738,
            self::CODE__739,
            self::CODE__740,
            self::CODE__741,
            self::CODE__742,
            self::CODE__743,
            self::CODE__744,
            self::CODE__745,
            self::CODE__746,
            self::CODE__747,
            self::CODE__748,
            self::CODE__749,
            self::CODE__750,
            self::CODE__751,
            self::CODE__752,
            self::CODE__753,
            self::CODE__754,
            self::CODE__755,
            self::CODE__756,
            self::CODE__761,
            self::CODE__762,
            self::CODE__763,
            self::CODE__764,
            self::CODE__765,
            self::CODE__766,
            self::CODE__767,
            self::CODE__768,
            self::CODE__769,
            self::CODE__770,
            self::CODE__771,
            self::CODE__772,
            self::CODE__773,
            self::CODE__774,
            self::CODE__775,
            self::CODE__776,
            self::CODE__777,
            self::CODE__778,
            self::CODE__779,
            self::CODE__780,
            self::CODE__781,
            self::CODE__783,
            self::CODE__785,
            self::CODE__787,
            self::CODE__789,
            self::CODE__790,
            self::CODE__791,
            self::CODE__792,
            self::CODE__793,
            self::CODE__794,
            self::CODE__795,
            self::CODE__796,
            self::CODE__797,
            self::CODE__798,
            self::CODE__799,
            self::CODE__800,
            self::CODE__801,
            self::CODE__802,
            self::CODE__803,
            self::CODE__804,
            self::CODE__805,
            self::CODE__806,
            self::CODE__807,
            self::CODE__808,
            self::CODE__809,
            self::CODE__810,
            self::CODE__811,
            self::CODE__812,
            self::CODE__813,
            self::CODE__814,
            self::CODE__815,
            self::CODE__816,
            self::CODE__817,
            self::CODE__818,
            self::CODE__819,
            self::CODE__820,
            self::CODE__821,
            self::CODE__822,
            self::CODE__823,
            self::CODE__824,
            self::CODE__825,
            self::CODE__826,
            self::CODE__827,
            self::CODE__828,
            self::CODE__829,
            self::CODE__830,
            self::CODE__831,
            self::CODE__832,
            self::CODE__833,
            self::CODE__834,
            self::CODE__835,
            self::CODE__836,
            self::CODE__837,
            self::CODE__838,
            self::CODE__839,
            self::CODE__840,
            self::CODE__841,
            self::CODE__842,
            self::CODE__843,
            self::CODE__844,
            self::CODE__845,
            self::CODE__846,
            self::CODE__847,
            self::CODE__848,
            self::CODE__849,
            self::CODE__850,
            self::CODE__851,
            self::CODE__852,
            self::CODE__853,
            self::CODE__854,
            self::CODE__855,
            self::CODE__856,
            self::CODE__857,
            self::CODE__858,
            self::CODE__859,
            self::CODE__860,
            self::CODE__861,
            self::CODE__862,
            self::CODE__863,
            self::CODE__864,
            self::CODE__865,
            self::CODE__866,
            self::CODE__867,
            self::CODE__868,
            self::CODE__869,
            self::CODE__870,
            self::CODE__871,
            self::CODE__872,
            self::CODE__873,
            self::CODE__874,
            self::CODE__875,
            self::CODE__876,
            self::CODE__877,
            self::CODE__878,
            self::CODE__879,
            self::CODE__880,
            self::CODE__881,
            self::CODE__882,
            self::CODE__883,
            self::CODE__884,
            self::CODE__885,
            self::CODE__886,
            self::CODE__887,
            self::CODE__888,
            self::CODE__889,
            self::CODE__890,
            self::CODE__891,
            self::CODE__892,
            self::CODE__893,
            self::CODE__894,
            self::CODE__895,
            self::CODE__896,
            self::CODE__897,
            self::CODE__898,
            self::CODE__899,
            self::CODE__900,
            self::CODE__901,
            self::CODE__902,
            self::CODE__903,
            self::CODE__904,
            self::CODE__905,
            self::CODE__906,
            self::CODE__907,
            self::CODE__908,
            self::CODE__909,
            self::CODE__910,
            self::CODE__911,
            self::CODE__912,
            self::CODE__913,
            self::CODE__914,
            self::CODE__915,
            self::CODE__916,
            self::CODE__917,
            self::CODE__918,
            self::CODE__919,
            self::CODE__920,
            self::CODE__921,
            self::CODE__922,
            self::CODE__923,
            self::CODE__924,
            self::CODE__925,
            self::CODE__926,
            self::CODE__927,
            self::CODE__928,
            self::CODE__929,
            self::CODE__930,
            self::CODE__931,
            self::CODE__932,
            self::CODE__933,
            self::CODE__934,
            self::CODE__935,
            self::CODE__936,
            self::CODE__937,
            self::CODE__938,
            self::CODE__939,
            self::CODE__940,
            self::CODE__941,
            self::CODE__942,
            self::CODE__943,
            self::CODE__944,
            self::CODE__945,
            self::CODE__946,
            self::CODE__947,
            self::CODE__948,
            self::CODE__949,
            self::CODE__950,
            self::CODE__951,
            self::CODE__952,
            self::CODE__953,
            self::CODE__954,
            self::CODE__955,
            self::CODE__956,
            self::CODE__957,
            self::CODE__958,
            self::CODE__959,
            self::CODE__960,
            self::CODE__961,
            self::CODE__962,
            self::CODE__963,
            self::CODE__964,
            self::CODE__965,
            self::CODE__966,
            self::CODE__967,
            self::CODE__968,
            self::CODE__969,
            self::CODE__970,
            self::CODE__971,
            self::CODE__972,
            self::CODE__973,
            self::CODE__974,
            self::CODE__975,
            self::CODE__976,
            self::CODE__977,
            self::CODE__978,
            self::CODE__979,
            self::CODE__980,
            self::CODE__981,
            self::CODE__982,
            self::CODE__983,
            self::CODE__984,
            self::CODE__985,
            self::CODE__986,
            self::CODE__987,
            self::CODE__988,
            self::CODE__989,
            self::CODE__990,
            self::CODE__991,
            self::CODE__992,
            self::CODE__993,
            self::CODE__994,
            self::CODE__995,
            self::CODE__996,
            self::CODE__997,
            self::CODE__998,
            self::CODE__999,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('originated_at', $data ?? [], null);
        $this->setIfExists('code', $data ?? [], null);
        $this->setIfExists('message', $data ?? [], null);
        $this->setIfExists('waiting_minutes', $data ?? [], null);
        $this->setIfExists('emitted_by', $data ?? [], null);
        $this->setIfExists('name_of_signer', $data ?? [], null);
        $this->setIfExists('vehicle_latitude', $data ?? [], null);
        $this->setIfExists('vehicle_longitude', $data ?? [], null);
        $this->setIfExists('estimated_collection_at_from', $data ?? [], null);
        $this->setIfExists('estimated_collection_at_until', $data ?? [], null);
        $this->setIfExists('estimated_arrival_at_from', $data ?? [], null);
        $this->setIfExists('estimated_arrival_at_until', $data ?? [], null);
        $this->setIfExists('stops_until_collection', $data ?? [], null);
        $this->setIfExists('stops_until_delivery', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['originated_at'] === null) {
            $invalidProperties[] = "'originated_at' can't be null";
        }
        if ($this->container['code'] === null) {
            $invalidProperties[] = "'code' can't be null";
        }
        $allowedValues = $this->getCodeAllowableValues();
        if (!is_null($this->container['code']) && !in_array($this->container['code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'code', must be one of '%s'",
                $this->container['code'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['estimated_collection_at_from'] === null) {
            $invalidProperties[] = "'estimated_collection_at_from' can't be null";
        }
        if ($this->container['estimated_collection_at_until'] === null) {
            $invalidProperties[] = "'estimated_collection_at_until' can't be null";
        }
        if ($this->container['estimated_arrival_at_from'] === null) {
            $invalidProperties[] = "'estimated_arrival_at_from' can't be null";
        }
        if ($this->container['estimated_arrival_at_until'] === null) {
            $invalidProperties[] = "'estimated_arrival_at_until' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets originated_at
     *
     * @return \DateTime
     */
    public function getOriginatedAt()
    {
        return $this->container['originated_at'];
    }

    /**
     * Sets originated_at
     *
     * @param \DateTime $originated_at Date and time when status event happened.
     *
     * @return self
     */
    public function setOriginatedAt($originated_at)
    {
        if (is_null($originated_at)) {
            throw new \InvalidArgumentException('non-nullable originated_at cannot be null');
        }
        $this->container['originated_at'] = $originated_at;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code Status code of event.
     *
     * @return self
     */
    public function setCode($code)
    {
        if (is_null($code)) {
            throw new \InvalidArgumentException('non-nullable code cannot be null');
        }
        $allowedValues = $this->getCodeAllowableValues();
        if (!in_array($code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'code', must be one of '%s'",
                    $code,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string|null
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string|null $message Message for the event.
     *
     * @return self
     */
    public function setMessage($message)
    {
        if (is_null($message)) {
            throw new \InvalidArgumentException('non-nullable message cannot be null');
        }
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets waiting_minutes
     *
     * @return float|null
     */
    public function getWaitingMinutes()
    {
        return $this->container['waiting_minutes'];
    }

    /**
     * Sets waiting_minutes
     *
     * @param float|null $waiting_minutes Waiting time in minutes.
     *
     * @return self
     */
    public function setWaitingMinutes($waiting_minutes)
    {
        if (is_null($waiting_minutes)) {
            throw new \InvalidArgumentException('non-nullable waiting_minutes cannot be null');
        }
        $this->container['waiting_minutes'] = $waiting_minutes;

        return $this;
    }

    /**
     * Gets emitted_by
     *
     * @return string|null
     */
    public function getEmittedBy()
    {
        return $this->container['emitted_by'];
    }

    /**
     * Sets emitted_by
     *
     * @param string|null $emitted_by Id of executive partner
     *
     * @return self
     */
    public function setEmittedBy($emitted_by)
    {
        if (is_null($emitted_by)) {
            throw new \InvalidArgumentException('non-nullable emitted_by cannot be null');
        }
        $this->container['emitted_by'] = $emitted_by;

        return $this;
    }

    /**
     * Gets name_of_signer
     *
     * @return string|null
     */
    public function getNameOfSigner()
    {
        return $this->container['name_of_signer'];
    }

    /**
     * Sets name_of_signer
     *
     * @param string|null $name_of_signer Name of signer.
     *
     * @return self
     */
    public function setNameOfSigner($name_of_signer)
    {
        if (is_null($name_of_signer)) {
            throw new \InvalidArgumentException('non-nullable name_of_signer cannot be null');
        }
        $this->container['name_of_signer'] = $name_of_signer;

        return $this;
    }

    /**
     * Gets vehicle_latitude
     *
     * @return float|null
     */
    public function getVehicleLatitude()
    {
        return $this->container['vehicle_latitude'];
    }

    /**
     * Sets vehicle_latitude
     *
     * @param float|null $vehicle_latitude Latitude of coordinates.
     *
     * @return self
     */
    public function setVehicleLatitude($vehicle_latitude)
    {
        if (is_null($vehicle_latitude)) {
            throw new \InvalidArgumentException('non-nullable vehicle_latitude cannot be null');
        }
        $this->container['vehicle_latitude'] = $vehicle_latitude;

        return $this;
    }

    /**
     * Gets vehicle_longitude
     *
     * @return float|null
     */
    public function getVehicleLongitude()
    {
        return $this->container['vehicle_longitude'];
    }

    /**
     * Sets vehicle_longitude
     *
     * @param float|null $vehicle_longitude Longitude of coordinates.
     *
     * @return self
     */
    public function setVehicleLongitude($vehicle_longitude)
    {
        if (is_null($vehicle_longitude)) {
            throw new \InvalidArgumentException('non-nullable vehicle_longitude cannot be null');
        }
        $this->container['vehicle_longitude'] = $vehicle_longitude;

        return $this;
    }

    /**
     * Gets estimated_collection_at_from
     *
     * @return \DateTime
     */
    public function getEstimatedCollectionAtFrom()
    {
        return $this->container['estimated_collection_at_from'];
    }

    /**
     * Sets estimated_collection_at_from
     *
     * @param \DateTime $estimated_collection_at_from Date and time of collection from happened.
     *
     * @return self
     */
    public function setEstimatedCollectionAtFrom($estimated_collection_at_from)
    {
        if (is_null($estimated_collection_at_from)) {
            throw new \InvalidArgumentException('non-nullable estimated_collection_at_from cannot be null');
        }
        $this->container['estimated_collection_at_from'] = $estimated_collection_at_from;

        return $this;
    }

    /**
     * Gets estimated_collection_at_until
     *
     * @return \DateTime
     */
    public function getEstimatedCollectionAtUntil()
    {
        return $this->container['estimated_collection_at_until'];
    }

    /**
     * Sets estimated_collection_at_until
     *
     * @param \DateTime $estimated_collection_at_until Date and time of collection until happened.
     *
     * @return self
     */
    public function setEstimatedCollectionAtUntil($estimated_collection_at_until)
    {
        if (is_null($estimated_collection_at_until)) {
            throw new \InvalidArgumentException('non-nullable estimated_collection_at_until cannot be null');
        }
        $this->container['estimated_collection_at_until'] = $estimated_collection_at_until;

        return $this;
    }

    /**
     * Gets estimated_arrival_at_from
     *
     * @return \DateTime
     */
    public function getEstimatedArrivalAtFrom()
    {
        return $this->container['estimated_arrival_at_from'];
    }

    /**
     * Sets estimated_arrival_at_from
     *
     * @param \DateTime $estimated_arrival_at_from Date and time of arrival from happened.
     *
     * @return self
     */
    public function setEstimatedArrivalAtFrom($estimated_arrival_at_from)
    {
        if (is_null($estimated_arrival_at_from)) {
            throw new \InvalidArgumentException('non-nullable estimated_arrival_at_from cannot be null');
        }
        $this->container['estimated_arrival_at_from'] = $estimated_arrival_at_from;

        return $this;
    }

    /**
     * Gets estimated_arrival_at_until
     *
     * @return \DateTime
     */
    public function getEstimatedArrivalAtUntil()
    {
        return $this->container['estimated_arrival_at_until'];
    }

    /**
     * Sets estimated_arrival_at_until
     *
     * @param \DateTime $estimated_arrival_at_until Date and time of arrival until happened.
     *
     * @return self
     */
    public function setEstimatedArrivalAtUntil($estimated_arrival_at_until)
    {
        if (is_null($estimated_arrival_at_until)) {
            throw new \InvalidArgumentException('non-nullable estimated_arrival_at_until cannot be null');
        }
        $this->container['estimated_arrival_at_until'] = $estimated_arrival_at_until;

        return $this;
    }

    /**
     * Gets stops_until_collection
     *
     * @return float|null
     */
    public function getStopsUntilCollection()
    {
        return $this->container['stops_until_collection'];
    }

    /**
     * Sets stops_until_collection
     *
     * @param float|null $stops_until_collection Stops until collection.
     *
     * @return self
     */
    public function setStopsUntilCollection($stops_until_collection)
    {
        if (is_null($stops_until_collection)) {
            throw new \InvalidArgumentException('non-nullable stops_until_collection cannot be null');
        }
        $this->container['stops_until_collection'] = $stops_until_collection;

        return $this;
    }

    /**
     * Gets stops_until_delivery
     *
     * @return float|null
     */
    public function getStopsUntilDelivery()
    {
        return $this->container['stops_until_delivery'];
    }

    /**
     * Sets stops_until_delivery
     *
     * @param float|null $stops_until_delivery Stops until delivery.
     *
     * @return self
     */
    public function setStopsUntilDelivery($stops_until_delivery)
    {
        if (is_null($stops_until_delivery)) {
            throw new \InvalidArgumentException('non-nullable stops_until_delivery cannot be null');
        }
        $this->container['stops_until_delivery'] = $stops_until_delivery;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


