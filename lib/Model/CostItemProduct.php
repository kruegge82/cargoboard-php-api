<?php
/**
 * CostItemProduct
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  kruegge82\cargoboard
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Documentation
 *
 * &lt;h4&gt;Authentication.&lt;/h4&gt; &lt;p&gt;Authentication is done with X-API-KEY. You can request a key via mail to api@cargoboard.com.
 *
 * The version of the OpenAPI document: 1.0.5
 * Contact: api@cargoboard.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\cargoboard\Model;

use \ArrayAccess;
use \kruegge82\cargoboard\ObjectSerializer;

/**
 * CostItemProduct Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\cargoboard
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CostItemProduct implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CostItemProduct';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'description' => 'string',
        'type' => 'string',
        'subtype' => 'string',
        'price' => '\kruegge82\cargoboard\Model\Price'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'description' => null,
        'type' => null,
        'subtype' => null,
        'price' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'description' => false,
        'type' => false,
        'subtype' => false,
        'price' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'description' => 'description',
        'type' => 'type',
        'subtype' => 'subtype',
        'price' => 'price'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'description' => 'setDescription',
        'type' => 'setType',
        'subtype' => 'setSubtype',
        'price' => 'setPrice'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'description' => 'getDescription',
        'type' => 'getType',
        'subtype' => 'getSubtype',
        'price' => 'getPrice'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_DANGEROUS_GOODS = 'DANGEROUS_GOODS';
    public const TYPE_PRIVATE_CUSTOMER = 'PRIVATE_CUSTOMER';
    public const TYPE_IMPORT_DUTIES = 'IMPORT_DUTIES';
    public const TYPE_CONTACT_BEFORE_PICKUP = 'CONTACT_BEFORE_PICKUP';
    public const TYPE_TAIL_LIFT_TRUCK = 'TAIL_LIFT_TRUCK';
    public const TYPE_PREMIUM_DELIVERY = 'PREMIUM_DELIVERY';
    public const TYPE_CONTACT_BEFORE_DELIVERY = 'CONTACT_BEFORE_DELIVERY';
    public const TYPE_PHONE_CALL_FROM_DRIVER_BEFORE_DELIVERY = 'PHONE_CALL_FROM_DRIVER_BEFORE_DELIVERY';
    public const TYPE_PHONE_CALL_FROM_DRIVER_BEFORE_PICKUP = 'PHONE_CALL_FROM_DRIVER_BEFORE_PICKUP';
    public const TYPE_DELIVERY_WITHOUT_CONSIGNEE_PRESENCE = 'DELIVERY_WITHOUT_CONSIGNEE_PRESENCE';
    public const TYPE_TRANSPORT_INSURANCE = 'TRANSPORT_INSURANCE';
    public const TYPE_EXPORT_DECLARATION = 'EXPORT_DECLARATION';
    public const TYPE_ADDITIONAL_PRODUCTS = 'ADDITIONAL_PRODUCTS';
    public const TYPE_PALLET_EXCHANGE = 'PALLET_EXCHANGE';
    public const TYPE_CLIMATE_NEUTRAL_SURCHARGE = 'CLIMATE_NEUTRAL_SURCHARGE';
    public const TYPE_SHIPMENT = 'SHIPMENT';
    public const TYPE_GENERAL_MARGIN = 'GENERAL_MARGIN';
    public const TYPE_CUSTOMIZED_MARGIN = 'CUSTOMIZED_MARGIN';
    public const TYPE_ACTUAL_COST_CORRECTION = 'ACTUAL_COST_CORRECTION';
    public const TYPE_FUEL_SURCHARGE = 'FUEL_SURCHARGE';
    public const TYPE_CUSTOMER_DISCOUNT = 'CUSTOMER_DISCOUNT';
    public const TYPE_COUPON = 'COUPON';
    public const SUBTYPE_PICKUP_ADVISE = 'PICKUP_ADVISE';
    public const SUBTYPE_DELIVERY_ADVISE = 'DELIVERY_ADVISE';
    public const SUBTYPE_PHONE_CALL_FROM_DRIVER_BEFORE_PICKUP = 'PHONE_CALL_FROM_DRIVER_BEFORE_PICKUP';
    public const SUBTYPE_PHONE_CALL_FROM_DRIVER_BEFORE_DELIVERY = 'PHONE_CALL_FROM_DRIVER_BEFORE_DELIVERY';
    public const SUBTYPE_TAIL_LIFT = 'TAIL_LIFT';
    public const SUBTYPE_TAIL_LIFT_PICKUP = 'TAIL_LIFT_PICKUP';
    public const SUBTYPE_TAIL_LIFT_DELIVERY = 'TAIL_LIFT_DELIVERY';
    public const SUBTYPE_DELIVERY_WHITOUT_CONSIGNEE_PRESENCE = 'DELIVERY_WHITOUT_CONSIGNEE_PRESENCE';
    public const SUBTYPE_PREMIUM_DELIVERY = 'PREMIUM_DELIVERY';
    public const SUBTYPE_PRIVATE_CONSIGNEE = 'PRIVATE_CONSIGNEE';
    public const SUBTYPE_EXPRESS_16 = 'EXPRESS_16';
    public const SUBTYPE_EXPRESS_12 = 'EXPRESS_12';
    public const SUBTYPE_EXPRESS_10 = 'EXPRESS_10';
    public const SUBTYPE_EXPRESS_8 = 'EXPRESS_8';
    public const SUBTYPE_FIX_16 = 'FIX_16';
    public const SUBTYPE_FIX_12 = 'FIX_12';
    public const SUBTYPE_FIX_10 = 'FIX_10';
    public const SUBTYPE_FIX_8 = 'FIX_8';
    public const SUBTYPE_PICKUP_BEFORE_12 = 'PICKUP_BEFORE_12';
    public const SUBTYPE_PICKUP_AFTER_12 = 'PICKUP_AFTER_12';
    public const SUBTYPE_DELIVERY_BEFORE_12 = 'DELIVERY_BEFORE_12';
    public const SUBTYPE_DELIVERY_AFTER_12 = 'DELIVERY_AFTER_12';
    public const SUBTYPE_EXPORT_DECLARATION = 'EXPORT_DECLARATION';
    public const SUBTYPE_IMPORT_DECLARATION = 'IMPORT_DECLARATION';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_DANGEROUS_GOODS,
            self::TYPE_PRIVATE_CUSTOMER,
            self::TYPE_IMPORT_DUTIES,
            self::TYPE_CONTACT_BEFORE_PICKUP,
            self::TYPE_TAIL_LIFT_TRUCK,
            self::TYPE_PREMIUM_DELIVERY,
            self::TYPE_CONTACT_BEFORE_DELIVERY,
            self::TYPE_PHONE_CALL_FROM_DRIVER_BEFORE_DELIVERY,
            self::TYPE_PHONE_CALL_FROM_DRIVER_BEFORE_PICKUP,
            self::TYPE_DELIVERY_WITHOUT_CONSIGNEE_PRESENCE,
            self::TYPE_TRANSPORT_INSURANCE,
            self::TYPE_EXPORT_DECLARATION,
            self::TYPE_ADDITIONAL_PRODUCTS,
            self::TYPE_PALLET_EXCHANGE,
            self::TYPE_CLIMATE_NEUTRAL_SURCHARGE,
            self::TYPE_SHIPMENT,
            self::TYPE_GENERAL_MARGIN,
            self::TYPE_CUSTOMIZED_MARGIN,
            self::TYPE_ACTUAL_COST_CORRECTION,
            self::TYPE_FUEL_SURCHARGE,
            self::TYPE_CUSTOMER_DISCOUNT,
            self::TYPE_COUPON,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSubtypeAllowableValues()
    {
        return [
            self::SUBTYPE_PICKUP_ADVISE,
            self::SUBTYPE_DELIVERY_ADVISE,
            self::SUBTYPE_PHONE_CALL_FROM_DRIVER_BEFORE_PICKUP,
            self::SUBTYPE_PHONE_CALL_FROM_DRIVER_BEFORE_DELIVERY,
            self::SUBTYPE_TAIL_LIFT,
            self::SUBTYPE_TAIL_LIFT_PICKUP,
            self::SUBTYPE_TAIL_LIFT_DELIVERY,
            self::SUBTYPE_DELIVERY_WHITOUT_CONSIGNEE_PRESENCE,
            self::SUBTYPE_PREMIUM_DELIVERY,
            self::SUBTYPE_PRIVATE_CONSIGNEE,
            self::SUBTYPE_EXPRESS_16,
            self::SUBTYPE_EXPRESS_12,
            self::SUBTYPE_EXPRESS_10,
            self::SUBTYPE_EXPRESS_8,
            self::SUBTYPE_FIX_16,
            self::SUBTYPE_FIX_12,
            self::SUBTYPE_FIX_10,
            self::SUBTYPE_FIX_8,
            self::SUBTYPE_PICKUP_BEFORE_12,
            self::SUBTYPE_PICKUP_AFTER_12,
            self::SUBTYPE_DELIVERY_BEFORE_12,
            self::SUBTYPE_DELIVERY_AFTER_12,
            self::SUBTYPE_EXPORT_DECLARATION,
            self::SUBTYPE_IMPORT_DECLARATION,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('subtype', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['subtype'] === null) {
            $invalidProperties[] = "'subtype' can't be null";
        }
        $allowedValues = $this->getSubtypeAllowableValues();
        if (!is_null($this->container['subtype']) && !in_array($this->container['subtype'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'subtype', must be one of '%s'",
                $this->container['subtype'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['price'] === null) {
            $invalidProperties[] = "'price' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description for cost item.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Cost item type. Possible values: DANGEROUS_GOODS, PRIVATE_CUSTOMER, IMPORT_DUTIES, CONTACT_BEFORE_PICKUP, TAIL_LIFT_TRUCK, PREMIUM_DELIVERY, CONTACT_BEFORE_DELIVERY, PHONE_CALL_FROM_DRIVER_BEFORE_DELIVERY, PHONE_CALL_FROM_DRIVER_BEFORE_PICKUP, DELIVERY_WITHOUT_CONSIGNEE_PRESENCE, TRANSPORT_INSURANCE, EXPORT_DECLARATION, ADDITIONAL_PRODUCTS, PALLET_EXCHANGE, CLIMATE_NEUTRAL_SURCHARGE, SHIPMENT, GENERAL_MARGIN, CUSTOMIZED_MARGIN, ACTUAL_COST_CORRECTION, FUEL_SURCHARGE, CUSTOMER_DISCOUNT, COUPON.
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets subtype
     *
     * @return string
     */
    public function getSubtype()
    {
        return $this->container['subtype'];
    }

    /**
     * Sets subtype
     *
     * @param string $subtype Cost item subtype. Possible values: PICKUP_ADVISE, DELIVERY_ADVISE, PHONE_CALL_FROM_DRIVER_BEFORE_PICKUP, PHONE_CALL_FROM_DRIVER_BEFORE_DELIVERY, TAIL_LIFT, TAIL_LIFT_PICKUP, TAIL_LIFT_DELIVERY, DELIVERY_WHITOUT_CONSIGNEE_PRESENCE, PREMIUM_DELIVERY, PRIVATE_CONSIGNEE, EXPRESS_16, EXPRESS_12, EXPRESS_10, EXPRESS_8, FIX_16, FIX_12, FIX_10, FIX_8, PICKUP_BEFORE_12, PICKUP_AFTER_12, DELIVERY_BEFORE_12, DELIVERY_AFTER_12, EXPORT_DECLARATION, IMPORT_DECLARATION.
     *
     * @return self
     */
    public function setSubtype($subtype)
    {
        if (is_null($subtype)) {
            throw new \InvalidArgumentException('non-nullable subtype cannot be null');
        }
        $allowedValues = $this->getSubtypeAllowableValues();
        if (!in_array($subtype, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'subtype', must be one of '%s'",
                    $subtype,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['subtype'] = $subtype;

        return $this;
    }

    /**
     * Gets price
     *
     * @return \kruegge82\cargoboard\Model\Price
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param \kruegge82\cargoboard\Model\Price $price price
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            throw new \InvalidArgumentException('non-nullable price cannot be null');
        }
        $this->container['price'] = $price;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


