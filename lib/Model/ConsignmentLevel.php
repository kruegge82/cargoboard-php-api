<?php
/**
 * ConsignmentLevel
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  kruegge82\cargoboard
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Documentation
 *
 * &lt;h4&gt;Authentication.&lt;/h4&gt; &lt;p&gt;Authentication is done with X-API-KEY. You can request a key via mail to api@cargoboard.com.
 *
 * The version of the OpenAPI document: 1.0.5
 * Contact: api@cargoboard.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\cargoboard\Model;

use \ArrayAccess;
use \kruegge82\cargoboard\ObjectSerializer;

/**
 * ConsignmentLevel Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\cargoboard
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ConsignmentLevel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ConsignmentLevel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'object_id' => 'string',
        'consignment_object_ref' => 'string',
        'consignment_no_contracted_partner' => 'string',
        'consignment_no_delivering_partner' => 'string',
        'consignment_no_ordering_partner' => 'string',
        'pickup_order_no' => 'string',
        'ref_no' => 'string',
        'event' => '\kruegge82\cargoboard\Model\ConsignmentLevelEvent',
        'additional_text' => 'string[]',
        'errors' => '\kruegge82\cargoboard\Model\ConsignmentLevelError[]',
        'workflow_information' => '\kruegge82\cargoboard\Model\WorkflowInformation',
        'delivery_object_ref' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'object_id' => null,
        'consignment_object_ref' => null,
        'consignment_no_contracted_partner' => null,
        'consignment_no_delivering_partner' => null,
        'consignment_no_ordering_partner' => null,
        'pickup_order_no' => null,
        'ref_no' => null,
        'event' => null,
        'additional_text' => null,
        'errors' => null,
        'workflow_information' => null,
        'delivery_object_ref' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'object_id' => false,
        'consignment_object_ref' => false,
        'consignment_no_contracted_partner' => false,
        'consignment_no_delivering_partner' => false,
        'consignment_no_ordering_partner' => false,
        'pickup_order_no' => false,
        'ref_no' => false,
        'event' => false,
        'additional_text' => false,
        'errors' => false,
        'workflow_information' => false,
        'delivery_object_ref' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'object_id' => 'ObjectId',
        'consignment_object_ref' => 'ConsignmentObjectRef',
        'consignment_no_contracted_partner' => 'ConsignmentNoContractedPartner',
        'consignment_no_delivering_partner' => 'ConsignmentNoDeliveringPartner',
        'consignment_no_ordering_partner' => 'ConsignmentNoOrderingPartner',
        'pickup_order_no' => 'PickupOrderNo',
        'ref_no' => 'RefNo',
        'event' => 'Event',
        'additional_text' => 'AdditionalText',
        'errors' => 'Errors',
        'workflow_information' => 'WorkflowInformation',
        'delivery_object_ref' => 'DeliveryObjectRef'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'object_id' => 'setObjectId',
        'consignment_object_ref' => 'setConsignmentObjectRef',
        'consignment_no_contracted_partner' => 'setConsignmentNoContractedPartner',
        'consignment_no_delivering_partner' => 'setConsignmentNoDeliveringPartner',
        'consignment_no_ordering_partner' => 'setConsignmentNoOrderingPartner',
        'pickup_order_no' => 'setPickupOrderNo',
        'ref_no' => 'setRefNo',
        'event' => 'setEvent',
        'additional_text' => 'setAdditionalText',
        'errors' => 'setErrors',
        'workflow_information' => 'setWorkflowInformation',
        'delivery_object_ref' => 'setDeliveryObjectRef'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'object_id' => 'getObjectId',
        'consignment_object_ref' => 'getConsignmentObjectRef',
        'consignment_no_contracted_partner' => 'getConsignmentNoContractedPartner',
        'consignment_no_delivering_partner' => 'getConsignmentNoDeliveringPartner',
        'consignment_no_ordering_partner' => 'getConsignmentNoOrderingPartner',
        'pickup_order_no' => 'getPickupOrderNo',
        'ref_no' => 'getRefNo',
        'event' => 'getEvent',
        'additional_text' => 'getAdditionalText',
        'errors' => 'getErrors',
        'workflow_information' => 'getWorkflowInformation',
        'delivery_object_ref' => 'getDeliveryObjectRef'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('object_id', $data ?? [], null);
        $this->setIfExists('consignment_object_ref', $data ?? [], null);
        $this->setIfExists('consignment_no_contracted_partner', $data ?? [], null);
        $this->setIfExists('consignment_no_delivering_partner', $data ?? [], null);
        $this->setIfExists('consignment_no_ordering_partner', $data ?? [], null);
        $this->setIfExists('pickup_order_no', $data ?? [], null);
        $this->setIfExists('ref_no', $data ?? [], null);
        $this->setIfExists('event', $data ?? [], null);
        $this->setIfExists('additional_text', $data ?? [], null);
        $this->setIfExists('errors', $data ?? [], null);
        $this->setIfExists('workflow_information', $data ?? [], null);
        $this->setIfExists('delivery_object_ref', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['consignment_no_contracted_partner'] === null) {
            $invalidProperties[] = "'consignment_no_contracted_partner' can't be null";
        }
        if ($this->container['event'] === null) {
            $invalidProperties[] = "'event' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets object_id
     *
     * @return string|null
     */
    public function getObjectId()
    {
        return $this->container['object_id'];
    }

    /**
     * Sets object_id
     *
     * @param string|null $object_id object_id
     *
     * @return self
     */
    public function setObjectId($object_id)
    {
        if (is_null($object_id)) {
            throw new \InvalidArgumentException('non-nullable object_id cannot be null');
        }
        $this->container['object_id'] = $object_id;

        return $this;
    }

    /**
     * Gets consignment_object_ref
     *
     * @return string|null
     */
    public function getConsignmentObjectRef()
    {
        return $this->container['consignment_object_ref'];
    }

    /**
     * Sets consignment_object_ref
     *
     * @param string|null $consignment_object_ref Place Cepra object id [CCCCCCCC-CCCC-CCCC-CCCC-CCCCCCCCCCCC] here.
     *
     * @return self
     */
    public function setConsignmentObjectRef($consignment_object_ref)
    {
        if (is_null($consignment_object_ref)) {
            throw new \InvalidArgumentException('non-nullable consignment_object_ref cannot be null');
        }
        $this->container['consignment_object_ref'] = $consignment_object_ref;

        return $this;
    }

    /**
     * Gets consignment_no_contracted_partner
     *
     * @return string
     */
    public function getConsignmentNoContractedPartner()
    {
        return $this->container['consignment_no_contracted_partner'];
    }

    /**
     * Sets consignment_no_contracted_partner
     *
     * @param string $consignment_no_contracted_partner consignment_no_contracted_partner
     *
     * @return self
     */
    public function setConsignmentNoContractedPartner($consignment_no_contracted_partner)
    {
        if (is_null($consignment_no_contracted_partner)) {
            throw new \InvalidArgumentException('non-nullable consignment_no_contracted_partner cannot be null');
        }
        $this->container['consignment_no_contracted_partner'] = $consignment_no_contracted_partner;

        return $this;
    }

    /**
     * Gets consignment_no_delivering_partner
     *
     * @return string|null
     */
    public function getConsignmentNoDeliveringPartner()
    {
        return $this->container['consignment_no_delivering_partner'];
    }

    /**
     * Sets consignment_no_delivering_partner
     *
     * @param string|null $consignment_no_delivering_partner consignment_no_delivering_partner
     *
     * @return self
     */
    public function setConsignmentNoDeliveringPartner($consignment_no_delivering_partner)
    {
        if (is_null($consignment_no_delivering_partner)) {
            throw new \InvalidArgumentException('non-nullable consignment_no_delivering_partner cannot be null');
        }
        $this->container['consignment_no_delivering_partner'] = $consignment_no_delivering_partner;

        return $this;
    }

    /**
     * Gets consignment_no_ordering_partner
     *
     * @return string|null
     */
    public function getConsignmentNoOrderingPartner()
    {
        return $this->container['consignment_no_ordering_partner'];
    }

    /**
     * Sets consignment_no_ordering_partner
     *
     * @param string|null $consignment_no_ordering_partner consignment_no_ordering_partner
     *
     * @return self
     */
    public function setConsignmentNoOrderingPartner($consignment_no_ordering_partner)
    {
        if (is_null($consignment_no_ordering_partner)) {
            throw new \InvalidArgumentException('non-nullable consignment_no_ordering_partner cannot be null');
        }
        $this->container['consignment_no_ordering_partner'] = $consignment_no_ordering_partner;

        return $this;
    }

    /**
     * Gets pickup_order_no
     *
     * @return string|null
     */
    public function getPickupOrderNo()
    {
        return $this->container['pickup_order_no'];
    }

    /**
     * Sets pickup_order_no
     *
     * @param string|null $pickup_order_no Place Cargoboard order reference [1CCCCCCC] or Cepra object id [CCCCCCCC-CCCC-CCCC-CCCC-CCCCCCCCCCCC] here.
     *
     * @return self
     */
    public function setPickupOrderNo($pickup_order_no)
    {
        if (is_null($pickup_order_no)) {
            throw new \InvalidArgumentException('non-nullable pickup_order_no cannot be null');
        }
        $this->container['pickup_order_no'] = $pickup_order_no;

        return $this;
    }

    /**
     * Gets ref_no
     *
     * @return string|null
     */
    public function getRefNo()
    {
        return $this->container['ref_no'];
    }

    /**
     * Sets ref_no
     *
     * @param string|null $ref_no ref_no
     *
     * @return self
     */
    public function setRefNo($ref_no)
    {
        if (is_null($ref_no)) {
            throw new \InvalidArgumentException('non-nullable ref_no cannot be null');
        }
        $this->container['ref_no'] = $ref_no;

        return $this;
    }

    /**
     * Gets event
     *
     * @return \kruegge82\cargoboard\Model\ConsignmentLevelEvent
     */
    public function getEvent()
    {
        return $this->container['event'];
    }

    /**
     * Sets event
     *
     * @param \kruegge82\cargoboard\Model\ConsignmentLevelEvent $event event
     *
     * @return self
     */
    public function setEvent($event)
    {
        if (is_null($event)) {
            throw new \InvalidArgumentException('non-nullable event cannot be null');
        }
        $this->container['event'] = $event;

        return $this;
    }

    /**
     * Gets additional_text
     *
     * @return string[]|null
     */
    public function getAdditionalText()
    {
        return $this->container['additional_text'];
    }

    /**
     * Sets additional_text
     *
     * @param string[]|null $additional_text additional_text
     *
     * @return self
     */
    public function setAdditionalText($additional_text)
    {
        if (is_null($additional_text)) {
            throw new \InvalidArgumentException('non-nullable additional_text cannot be null');
        }
        $this->container['additional_text'] = $additional_text;

        return $this;
    }

    /**
     * Gets errors
     *
     * @return \kruegge82\cargoboard\Model\ConsignmentLevelError[]|null
     */
    public function getErrors()
    {
        return $this->container['errors'];
    }

    /**
     * Sets errors
     *
     * @param \kruegge82\cargoboard\Model\ConsignmentLevelError[]|null $errors errors
     *
     * @return self
     */
    public function setErrors($errors)
    {
        if (is_null($errors)) {
            throw new \InvalidArgumentException('non-nullable errors cannot be null');
        }
        $this->container['errors'] = $errors;

        return $this;
    }

    /**
     * Gets workflow_information
     *
     * @return \kruegge82\cargoboard\Model\WorkflowInformation|null
     */
    public function getWorkflowInformation()
    {
        return $this->container['workflow_information'];
    }

    /**
     * Sets workflow_information
     *
     * @param \kruegge82\cargoboard\Model\WorkflowInformation|null $workflow_information workflow_information
     *
     * @return self
     */
    public function setWorkflowInformation($workflow_information)
    {
        if (is_null($workflow_information)) {
            throw new \InvalidArgumentException('non-nullable workflow_information cannot be null');
        }
        $this->container['workflow_information'] = $workflow_information;

        return $this;
    }

    /**
     * Gets delivery_object_ref
     *
     * @return string|null
     */
    public function getDeliveryObjectRef()
    {
        return $this->container['delivery_object_ref'];
    }

    /**
     * Sets delivery_object_ref
     *
     * @param string|null $delivery_object_ref Place Cargoboard order reference [1CCCCCCC] or Cepra object id [CCCCCCCC-CCCC-CCCC-CCCC-CCCCCCCCCCCC] here.
     *
     * @return self
     */
    public function setDeliveryObjectRef($delivery_object_ref)
    {
        if (is_null($delivery_object_ref)) {
            throw new \InvalidArgumentException('non-nullable delivery_object_ref cannot be null');
        }
        $this->container['delivery_object_ref'] = $delivery_object_ref;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


