<?php
/**
 * ConsigneeOrder
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  kruegge82\cargoboard
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Documentation
 *
 * &lt;h4&gt;Authentication.&lt;/h4&gt; &lt;p&gt;Authentication is done with X-API-KEY. You can request a key via mail to api@cargoboard.com.
 *
 * The version of the OpenAPI document: 1.0.5
 * Contact: api@cargoboard.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\cargoboard\Model;

use \ArrayAccess;
use \kruegge82\cargoboard\ObjectSerializer;

/**
 * ConsigneeOrder Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\cargoboard
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ConsigneeOrder implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ConsigneeOrder';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'contact_person' => '\kruegge82\cargoboard\Model\ContactPerson',
        'address' => '\kruegge82\cargoboard\Model\AddressOrder',
        'neutral_data' => '\kruegge82\cargoboard\Model\NeutralData',
        'is_private_customer' => 'bool',
        'wants_contact_before_delivery' => 'bool',
        'wants_phone_call_from_driver_before_delivery' => 'bool',
        'wants_delivery_without_consignee_presence' => 'bool',
        'wants_tail_lift_truck' => 'bool',
        'delivery_on' => '\DateTime',
        'unloading_type' => 'string',
        'free_text_for_delivery' => 'string',
        'reference' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'contact_person' => null,
        'address' => null,
        'neutral_data' => null,
        'is_private_customer' => null,
        'wants_contact_before_delivery' => null,
        'wants_phone_call_from_driver_before_delivery' => null,
        'wants_delivery_without_consignee_presence' => null,
        'wants_tail_lift_truck' => null,
        'delivery_on' => 'date',
        'unloading_type' => null,
        'free_text_for_delivery' => null,
        'reference' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
        'contact_person' => false,
        'address' => false,
        'neutral_data' => false,
        'is_private_customer' => false,
        'wants_contact_before_delivery' => false,
        'wants_phone_call_from_driver_before_delivery' => false,
        'wants_delivery_without_consignee_presence' => false,
        'wants_tail_lift_truck' => false,
        'delivery_on' => false,
        'unloading_type' => false,
        'free_text_for_delivery' => false,
        'reference' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'contact_person' => 'contactPerson',
        'address' => 'address',
        'neutral_data' => 'neutralData',
        'is_private_customer' => 'isPrivateCustomer',
        'wants_contact_before_delivery' => 'wantsContactBeforeDelivery',
        'wants_phone_call_from_driver_before_delivery' => 'wantsPhoneCallFromDriverBeforeDelivery',
        'wants_delivery_without_consignee_presence' => 'wantsDeliveryWithoutConsigneePresence',
        'wants_tail_lift_truck' => 'wantsTailLiftTruck',
        'delivery_on' => 'deliveryOn',
        'unloading_type' => 'unloadingType',
        'free_text_for_delivery' => 'freeTextForDelivery',
        'reference' => 'reference'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'contact_person' => 'setContactPerson',
        'address' => 'setAddress',
        'neutral_data' => 'setNeutralData',
        'is_private_customer' => 'setIsPrivateCustomer',
        'wants_contact_before_delivery' => 'setWantsContactBeforeDelivery',
        'wants_phone_call_from_driver_before_delivery' => 'setWantsPhoneCallFromDriverBeforeDelivery',
        'wants_delivery_without_consignee_presence' => 'setWantsDeliveryWithoutConsigneePresence',
        'wants_tail_lift_truck' => 'setWantsTailLiftTruck',
        'delivery_on' => 'setDeliveryOn',
        'unloading_type' => 'setUnloadingType',
        'free_text_for_delivery' => 'setFreeTextForDelivery',
        'reference' => 'setReference'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'contact_person' => 'getContactPerson',
        'address' => 'getAddress',
        'neutral_data' => 'getNeutralData',
        'is_private_customer' => 'getIsPrivateCustomer',
        'wants_contact_before_delivery' => 'getWantsContactBeforeDelivery',
        'wants_phone_call_from_driver_before_delivery' => 'getWantsPhoneCallFromDriverBeforeDelivery',
        'wants_delivery_without_consignee_presence' => 'getWantsDeliveryWithoutConsigneePresence',
        'wants_tail_lift_truck' => 'getWantsTailLiftTruck',
        'delivery_on' => 'getDeliveryOn',
        'unloading_type' => 'getUnloadingType',
        'free_text_for_delivery' => 'getFreeTextForDelivery',
        'reference' => 'getReference'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('contact_person', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('neutral_data', $data ?? [], null);
        $this->setIfExists('is_private_customer', $data ?? [], false);
        $this->setIfExists('wants_contact_before_delivery', $data ?? [], false);
        $this->setIfExists('wants_phone_call_from_driver_before_delivery', $data ?? [], false);
        $this->setIfExists('wants_delivery_without_consignee_presence', $data ?? [], false);
        $this->setIfExists('wants_tail_lift_truck', $data ?? [], null);
        $this->setIfExists('delivery_on', $data ?? [], null);
        $this->setIfExists('unloading_type', $data ?? [], null);
        $this->setIfExists('free_text_for_delivery', $data ?? [], null);
        $this->setIfExists('reference', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['address'] === null) {
            $invalidProperties[] = "'address' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets contact_person
     *
     * @return \kruegge82\cargoboard\Model\ContactPerson|null
     */
    public function getContactPerson()
    {
        return $this->container['contact_person'];
    }

    /**
     * Sets contact_person
     *
     * @param \kruegge82\cargoboard\Model\ContactPerson|null $contact_person contact_person
     *
     * @return self
     */
    public function setContactPerson($contact_person)
    {
        if (is_null($contact_person)) {
            throw new \InvalidArgumentException('non-nullable contact_person cannot be null');
        }
        $this->container['contact_person'] = $contact_person;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \kruegge82\cargoboard\Model\AddressOrder
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \kruegge82\cargoboard\Model\AddressOrder $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets neutral_data
     *
     * @return \kruegge82\cargoboard\Model\NeutralData|null
     */
    public function getNeutralData()
    {
        return $this->container['neutral_data'];
    }

    /**
     * Sets neutral_data
     *
     * @param \kruegge82\cargoboard\Model\NeutralData|null $neutral_data Neutral data for obfuscation.
     *
     * @return self
     */
    public function setNeutralData($neutral_data)
    {
        if (is_null($neutral_data)) {
            throw new \InvalidArgumentException('non-nullable neutral_data cannot be null');
        }
        $this->container['neutral_data'] = $neutral_data;

        return $this;
    }

    /**
     * Gets is_private_customer
     *
     * @return bool|null
     */
    public function getIsPrivateCustomer()
    {
        return $this->container['is_private_customer'];
    }

    /**
     * Sets is_private_customer
     *
     * @param bool|null $is_private_customer Consignee is private customer.
     *
     * @return self
     */
    public function setIsPrivateCustomer($is_private_customer)
    {
        if (is_null($is_private_customer)) {
            throw new \InvalidArgumentException('non-nullable is_private_customer cannot be null');
        }
        $this->container['is_private_customer'] = $is_private_customer;

        return $this;
    }

    /**
     * Gets wants_contact_before_delivery
     *
     * @return bool|null
     */
    public function getWantsContactBeforeDelivery()
    {
        return $this->container['wants_contact_before_delivery'];
    }

    /**
     * Sets wants_contact_before_delivery
     *
     * @param bool|null $wants_contact_before_delivery A service where a Logistic Company contacts the customer by phone days/hours before the delivery and arranges an appointment for the delivery. This is often booked when a customer is not on site every time and needs an exact time.
     *
     * @return self
     */
    public function setWantsContactBeforeDelivery($wants_contact_before_delivery)
    {
        if (is_null($wants_contact_before_delivery)) {
            throw new \InvalidArgumentException('non-nullable wants_contact_before_delivery cannot be null');
        }
        $this->container['wants_contact_before_delivery'] = $wants_contact_before_delivery;

        return $this;
    }

    /**
     * Gets wants_phone_call_from_driver_before_delivery
     *
     * @return bool|null
     */
    public function getWantsPhoneCallFromDriverBeforeDelivery()
    {
        return $this->container['wants_phone_call_from_driver_before_delivery'];
    }

    /**
     * Sets wants_phone_call_from_driver_before_delivery
     *
     * @param bool|null $wants_phone_call_from_driver_before_delivery A service where a Logistic Company contacts the customer by phone about 30 - 60 minutes before arriving at the customer location to deliver the shipment.
     *
     * @return self
     */
    public function setWantsPhoneCallFromDriverBeforeDelivery($wants_phone_call_from_driver_before_delivery)
    {
        if (is_null($wants_phone_call_from_driver_before_delivery)) {
            throw new \InvalidArgumentException('non-nullable wants_phone_call_from_driver_before_delivery cannot be null');
        }
        $this->container['wants_phone_call_from_driver_before_delivery'] = $wants_phone_call_from_driver_before_delivery;

        return $this;
    }

    /**
     * Gets wants_delivery_without_consignee_presence
     *
     * @return bool|null
     */
    public function getWantsDeliveryWithoutConsigneePresence()
    {
        return $this->container['wants_delivery_without_consignee_presence'];
    }

    /**
     * Sets wants_delivery_without_consignee_presence
     *
     * @param bool|null $wants_delivery_without_consignee_presence A service where delivery will not require consignee presence.
     *
     * @return self
     */
    public function setWantsDeliveryWithoutConsigneePresence($wants_delivery_without_consignee_presence)
    {
        if (is_null($wants_delivery_without_consignee_presence)) {
            throw new \InvalidArgumentException('non-nullable wants_delivery_without_consignee_presence cannot be null');
        }
        $this->container['wants_delivery_without_consignee_presence'] = $wants_delivery_without_consignee_presence;

        return $this;
    }

    /**
     * Gets wants_tail_lift_truck
     *
     * @return bool|null
     */
    public function getWantsTailLiftTruck()
    {
        return $this->container['wants_tail_lift_truck'];
    }

    /**
     * Sets wants_tail_lift_truck
     *
     * @param bool|null $wants_tail_lift_truck Wants Tail Lift Truck.
     *
     * @return self
     */
    public function setWantsTailLiftTruck($wants_tail_lift_truck)
    {
        if (is_null($wants_tail_lift_truck)) {
            throw new \InvalidArgumentException('non-nullable wants_tail_lift_truck cannot be null');
        }
        $this->container['wants_tail_lift_truck'] = $wants_tail_lift_truck;

        return $this;
    }

    /**
     * Gets delivery_on
     *
     * @return \DateTime|null
     */
    public function getDeliveryOn()
    {
        return $this->container['delivery_on'];
    }

    /**
     * Sets delivery_on
     *
     * @param \DateTime|null $delivery_on Date of delivery for fix product. Allowed delivery dates from Monday till Friday.
     *
     * @return self
     */
    public function setDeliveryOn($delivery_on)
    {
        if (is_null($delivery_on)) {
            throw new \InvalidArgumentException('non-nullable delivery_on cannot be null');
        }
        $this->container['delivery_on'] = $delivery_on;

        return $this;
    }

    /**
     * Gets unloading_type
     *
     * @return string|null
     */
    public function getUnloadingType()
    {
        return $this->container['unloading_type'];
    }

    /**
     * Sets unloading_type
     *
     * @param string|null $unloading_type Unloading type (delivery). Possible values RAMP, SIDE, CRANE, LIFTING_PLATFORM_OR_TAIL_LIFT_TRUCK
     *
     * @return self
     */
    public function setUnloadingType($unloading_type)
    {
        if (is_null($unloading_type)) {
            throw new \InvalidArgumentException('non-nullable unloading_type cannot be null');
        }
        $this->container['unloading_type'] = $unloading_type;

        return $this;
    }

    /**
     * Gets free_text_for_delivery
     *
     * @return string|null
     */
    public function getFreeTextForDelivery()
    {
        return $this->container['free_text_for_delivery'];
    }

    /**
     * Sets free_text_for_delivery
     *
     * @param string|null $free_text_for_delivery free_text_for_delivery
     *
     * @return self
     */
    public function setFreeTextForDelivery($free_text_for_delivery)
    {
        if (is_null($free_text_for_delivery)) {
            throw new \InvalidArgumentException('non-nullable free_text_for_delivery cannot be null');
        }
        $this->container['free_text_for_delivery'] = $free_text_for_delivery;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string|null
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string|null $reference reference
     *
     * @return self
     */
    public function setReference($reference)
    {
        if (is_null($reference)) {
            throw new \InvalidArgumentException('non-nullable reference cannot be null');
        }
        $this->container['reference'] = $reference;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


