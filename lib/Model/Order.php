<?php
/**
 * Order
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  kruegge82\cargoboard
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Documentation
 *
 * &lt;h4&gt;Authentication.&lt;/h4&gt; &lt;p&gt;Authentication is done with X-API-KEY. You can request a key via mail to api@cargoboard.com.
 *
 * The version of the OpenAPI document: 1.0.5
 * Contact: api@cargoboard.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\cargoboard\Model;

use \ArrayAccess;
use \kruegge82\cargoboard\ObjectSerializer;

/**
 * Order Class Doc Comment
 *
 * @category Class
 * @package  kruegge82\cargoboard
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Order implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Order';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'product' => 'string',
        'transport_type' => 'string',
        'customer_order_code' => 'string',
        'coupon_code' => 'string',
        'wants_export_declaration' => 'bool',
        'wants_climate_neutral_shipment' => 'bool',
        'wants_insurance' => 'bool',
        'incoterm' => 'string',
        'is_supplying_company_or_receiving_customer' => 'bool',
        'shipper' => '\kruegge82\cargoboard\Model\ShipperOrder',
        'consignee' => '\kruegge82\cargoboard\Model\ConsigneeOrder',
        'value_of_goods_amount' => 'float',
        'value_of_goods_currency' => 'string',
        'lines' => '\kruegge82\cargoboard\Model\LineOrder[]',
        'id' => 'string',
        'sequence' => 'float',
        'status' => 'string',
        'customer_id' => 'string',
        'quotation_id' => 'string',
        'reference' => 'string',
        'order_key_eikona' => 'string',
        'order_id_eikona' => 'string',
        'payment_process_id' => 'string',
        'payment_method' => 'string',
        'refund_type' => 'string',
        'is_easybill_invoicing_active' => 'bool',
        'is_confirmation_needed' => 'bool',
        'is_confirmed' => 'bool',
        'confirmed_at' => '\DateTime',
        'is_acceptance_needed' => 'bool',
        'is_accepted' => 'bool',
        'accepted_at' => '\DateTime',
        'easybill_invoices' => '\kruegge82\cargoboard\Model\EasybillInvoice[]',
        'runtime_days_min' => 'float',
        'runtime_days_max' => 'float',
        'price_amount' => 'float',
        'price_currency' => 'string',
        'price_amount_standard' => 'float',
        'price_currency_standard' => 'string',
        'placed_at' => '\DateTime',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'truck_type' => 'string',
        'domain' => 'string',
        'shipping_partner' => 'string',
        'delivering_partner' => 'string',
        'shipment_status' => 'string',
        'tariff_category' => 'string',
        'lines_weight' => 'float',
        'lines_volume' => 'float',
        'lines_pallet_bays' => 'float',
        'lines_loading_meter' => 'float',
        'co2_emission_amount' => 'float',
        'co2_emission_value' => 'float',
        'co2_emission_unit' => 'string',
        'shipping_partner_order_number' => 'string',
        'delivering_partner_order_number' => 'string',
        'shipment_cost' => 'float',
        'actual_cost' => 'float',
        'actual_price' => 'float',
        'actual_price_standard' => 'float',
        'gross_actual_price' => 'float',
        'is_country_with_customs' => 'bool',
        'is_shipper_country_with_customs' => 'bool',
        'is_charter_shipment' => 'bool',
        'cost_items' => '\kruegge82\cargoboard\Model\CostItemOrder[]',
        'quantity_of_euro_pallets' => 'object',
        'lines_units_quantity' => 'object',
        'lines_packages_quantity' => 'object',
        'is_invoiceable' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'product' => null,
        'transport_type' => null,
        'customer_order_code' => null,
        'coupon_code' => null,
        'wants_export_declaration' => null,
        'wants_climate_neutral_shipment' => null,
        'wants_insurance' => null,
        'incoterm' => null,
        'is_supplying_company_or_receiving_customer' => null,
        'shipper' => null,
        'consignee' => null,
        'value_of_goods_amount' => null,
        'value_of_goods_currency' => null,
        'lines' => null,
        'id' => null,
        'sequence' => null,
        'status' => null,
        'customer_id' => null,
        'quotation_id' => null,
        'reference' => null,
        'order_key_eikona' => null,
        'order_id_eikona' => null,
        'payment_process_id' => null,
        'payment_method' => null,
        'refund_type' => null,
        'is_easybill_invoicing_active' => null,
        'is_confirmation_needed' => null,
        'is_confirmed' => null,
        'confirmed_at' => 'date-time',
        'is_acceptance_needed' => null,
        'is_accepted' => null,
        'accepted_at' => 'date-time',
        'easybill_invoices' => null,
        'runtime_days_min' => null,
        'runtime_days_max' => null,
        'price_amount' => null,
        'price_currency' => null,
        'price_amount_standard' => null,
        'price_currency_standard' => null,
        'placed_at' => 'date-time',
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'truck_type' => null,
        'domain' => null,
        'shipping_partner' => null,
        'delivering_partner' => null,
        'shipment_status' => null,
        'tariff_category' => null,
        'lines_weight' => null,
        'lines_volume' => null,
        'lines_pallet_bays' => null,
        'lines_loading_meter' => null,
        'co2_emission_amount' => null,
        'co2_emission_value' => null,
        'co2_emission_unit' => null,
        'shipping_partner_order_number' => null,
        'delivering_partner_order_number' => null,
        'shipment_cost' => null,
        'actual_cost' => null,
        'actual_price' => null,
        'actual_price_standard' => null,
        'gross_actual_price' => null,
        'is_country_with_customs' => null,
        'is_shipper_country_with_customs' => null,
        'is_charter_shipment' => null,
        'cost_items' => null,
        'quantity_of_euro_pallets' => null,
        'lines_units_quantity' => null,
        'lines_packages_quantity' => null,
        'is_invoiceable' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'product' => false,
        'transport_type' => false,
        'customer_order_code' => false,
        'coupon_code' => false,
        'wants_export_declaration' => false,
        'wants_climate_neutral_shipment' => false,
        'wants_insurance' => false,
        'incoterm' => false,
        'is_supplying_company_or_receiving_customer' => false,
        'shipper' => false,
        'consignee' => false,
        'value_of_goods_amount' => false,
        'value_of_goods_currency' => false,
        'lines' => false,
        'id' => false,
        'sequence' => false,
        'status' => false,
        'customer_id' => false,
        'quotation_id' => false,
        'reference' => false,
        'order_key_eikona' => false,
        'order_id_eikona' => false,
        'payment_process_id' => false,
        'payment_method' => false,
        'refund_type' => false,
        'is_easybill_invoicing_active' => false,
        'is_confirmation_needed' => false,
        'is_confirmed' => false,
        'confirmed_at' => false,
        'is_acceptance_needed' => false,
        'is_accepted' => false,
        'accepted_at' => false,
        'easybill_invoices' => false,
        'runtime_days_min' => false,
        'runtime_days_max' => false,
        'price_amount' => false,
        'price_currency' => false,
        'price_amount_standard' => false,
        'price_currency_standard' => false,
        'placed_at' => false,
        'created_at' => false,
        'updated_at' => false,
        'truck_type' => false,
        'domain' => false,
        'shipping_partner' => false,
        'delivering_partner' => false,
        'shipment_status' => false,
        'tariff_category' => false,
        'lines_weight' => false,
        'lines_volume' => false,
        'lines_pallet_bays' => false,
        'lines_loading_meter' => false,
        'co2_emission_amount' => false,
        'co2_emission_value' => false,
        'co2_emission_unit' => false,
        'shipping_partner_order_number' => false,
        'delivering_partner_order_number' => false,
        'shipment_cost' => false,
        'actual_cost' => false,
        'actual_price' => false,
        'actual_price_standard' => false,
        'gross_actual_price' => false,
        'is_country_with_customs' => false,
        'is_shipper_country_with_customs' => false,
        'is_charter_shipment' => false,
        'cost_items' => false,
        'quantity_of_euro_pallets' => false,
        'lines_units_quantity' => false,
        'lines_packages_quantity' => false,
        'is_invoiceable' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'product' => 'product',
        'transport_type' => 'transportType',
        'customer_order_code' => 'customerOrderCode',
        'coupon_code' => 'couponCode',
        'wants_export_declaration' => 'wantsExportDeclaration',
        'wants_climate_neutral_shipment' => 'wantsClimateNeutralShipment',
        'wants_insurance' => 'wantsInsurance',
        'incoterm' => 'incoterm',
        'is_supplying_company_or_receiving_customer' => 'isSupplyingCompanyOrReceivingCustomer',
        'shipper' => 'shipper',
        'consignee' => 'consignee',
        'value_of_goods_amount' => 'valueOfGoodsAmount',
        'value_of_goods_currency' => 'valueOfGoodsCurrency',
        'lines' => 'lines',
        'id' => 'id',
        'sequence' => 'sequence',
        'status' => 'status',
        'customer_id' => 'customerId',
        'quotation_id' => 'quotationId',
        'reference' => 'reference',
        'order_key_eikona' => 'orderKeyEikona',
        'order_id_eikona' => 'orderIdEikona',
        'payment_process_id' => 'paymentProcessId',
        'payment_method' => 'paymentMethod',
        'refund_type' => 'refundType',
        'is_easybill_invoicing_active' => 'isEasybillInvoicingActive',
        'is_confirmation_needed' => 'isConfirmationNeeded',
        'is_confirmed' => 'isConfirmed',
        'confirmed_at' => 'confirmedAt',
        'is_acceptance_needed' => 'isAcceptanceNeeded',
        'is_accepted' => 'isAccepted',
        'accepted_at' => 'acceptedAt',
        'easybill_invoices' => 'easybillInvoices',
        'runtime_days_min' => 'runtimeDaysMin',
        'runtime_days_max' => 'runtimeDaysMax',
        'price_amount' => 'priceAmount',
        'price_currency' => 'priceCurrency',
        'price_amount_standard' => 'priceAmountStandard',
        'price_currency_standard' => 'priceCurrencyStandard',
        'placed_at' => 'placedAt',
        'created_at' => 'createdAt',
        'updated_at' => 'updatedAt',
        'truck_type' => 'truckType',
        'domain' => 'domain',
        'shipping_partner' => 'shippingPartner',
        'delivering_partner' => 'deliveringPartner',
        'shipment_status' => 'shipmentStatus',
        'tariff_category' => 'tariffCategory',
        'lines_weight' => 'linesWeight',
        'lines_volume' => 'linesVolume',
        'lines_pallet_bays' => 'linesPalletBays',
        'lines_loading_meter' => 'linesLoadingMeter',
        'co2_emission_amount' => 'co2EmissionAmount',
        'co2_emission_value' => 'co2EmissionValue',
        'co2_emission_unit' => 'co2EmissionUnit',
        'shipping_partner_order_number' => 'shippingPartnerOrderNumber',
        'delivering_partner_order_number' => 'deliveringPartnerOrderNumber',
        'shipment_cost' => 'shipmentCost',
        'actual_cost' => 'actualCost',
        'actual_price' => 'actualPrice',
        'actual_price_standard' => 'actualPriceStandard',
        'gross_actual_price' => 'grossActualPrice',
        'is_country_with_customs' => 'isCountryWithCustoms',
        'is_shipper_country_with_customs' => 'isShipperCountryWithCustoms',
        'is_charter_shipment' => 'isCharterShipment',
        'cost_items' => 'costItems',
        'quantity_of_euro_pallets' => 'quantityOfEuroPallets',
        'lines_units_quantity' => 'linesUnitsQuantity',
        'lines_packages_quantity' => 'linesPackagesQuantity',
        'is_invoiceable' => 'isInvoiceable'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'product' => 'setProduct',
        'transport_type' => 'setTransportType',
        'customer_order_code' => 'setCustomerOrderCode',
        'coupon_code' => 'setCouponCode',
        'wants_export_declaration' => 'setWantsExportDeclaration',
        'wants_climate_neutral_shipment' => 'setWantsClimateNeutralShipment',
        'wants_insurance' => 'setWantsInsurance',
        'incoterm' => 'setIncoterm',
        'is_supplying_company_or_receiving_customer' => 'setIsSupplyingCompanyOrReceivingCustomer',
        'shipper' => 'setShipper',
        'consignee' => 'setConsignee',
        'value_of_goods_amount' => 'setValueOfGoodsAmount',
        'value_of_goods_currency' => 'setValueOfGoodsCurrency',
        'lines' => 'setLines',
        'id' => 'setId',
        'sequence' => 'setSequence',
        'status' => 'setStatus',
        'customer_id' => 'setCustomerId',
        'quotation_id' => 'setQuotationId',
        'reference' => 'setReference',
        'order_key_eikona' => 'setOrderKeyEikona',
        'order_id_eikona' => 'setOrderIdEikona',
        'payment_process_id' => 'setPaymentProcessId',
        'payment_method' => 'setPaymentMethod',
        'refund_type' => 'setRefundType',
        'is_easybill_invoicing_active' => 'setIsEasybillInvoicingActive',
        'is_confirmation_needed' => 'setIsConfirmationNeeded',
        'is_confirmed' => 'setIsConfirmed',
        'confirmed_at' => 'setConfirmedAt',
        'is_acceptance_needed' => 'setIsAcceptanceNeeded',
        'is_accepted' => 'setIsAccepted',
        'accepted_at' => 'setAcceptedAt',
        'easybill_invoices' => 'setEasybillInvoices',
        'runtime_days_min' => 'setRuntimeDaysMin',
        'runtime_days_max' => 'setRuntimeDaysMax',
        'price_amount' => 'setPriceAmount',
        'price_currency' => 'setPriceCurrency',
        'price_amount_standard' => 'setPriceAmountStandard',
        'price_currency_standard' => 'setPriceCurrencyStandard',
        'placed_at' => 'setPlacedAt',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'truck_type' => 'setTruckType',
        'domain' => 'setDomain',
        'shipping_partner' => 'setShippingPartner',
        'delivering_partner' => 'setDeliveringPartner',
        'shipment_status' => 'setShipmentStatus',
        'tariff_category' => 'setTariffCategory',
        'lines_weight' => 'setLinesWeight',
        'lines_volume' => 'setLinesVolume',
        'lines_pallet_bays' => 'setLinesPalletBays',
        'lines_loading_meter' => 'setLinesLoadingMeter',
        'co2_emission_amount' => 'setCo2EmissionAmount',
        'co2_emission_value' => 'setCo2EmissionValue',
        'co2_emission_unit' => 'setCo2EmissionUnit',
        'shipping_partner_order_number' => 'setShippingPartnerOrderNumber',
        'delivering_partner_order_number' => 'setDeliveringPartnerOrderNumber',
        'shipment_cost' => 'setShipmentCost',
        'actual_cost' => 'setActualCost',
        'actual_price' => 'setActualPrice',
        'actual_price_standard' => 'setActualPriceStandard',
        'gross_actual_price' => 'setGrossActualPrice',
        'is_country_with_customs' => 'setIsCountryWithCustoms',
        'is_shipper_country_with_customs' => 'setIsShipperCountryWithCustoms',
        'is_charter_shipment' => 'setIsCharterShipment',
        'cost_items' => 'setCostItems',
        'quantity_of_euro_pallets' => 'setQuantityOfEuroPallets',
        'lines_units_quantity' => 'setLinesUnitsQuantity',
        'lines_packages_quantity' => 'setLinesPackagesQuantity',
        'is_invoiceable' => 'setIsInvoiceable'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'product' => 'getProduct',
        'transport_type' => 'getTransportType',
        'customer_order_code' => 'getCustomerOrderCode',
        'coupon_code' => 'getCouponCode',
        'wants_export_declaration' => 'getWantsExportDeclaration',
        'wants_climate_neutral_shipment' => 'getWantsClimateNeutralShipment',
        'wants_insurance' => 'getWantsInsurance',
        'incoterm' => 'getIncoterm',
        'is_supplying_company_or_receiving_customer' => 'getIsSupplyingCompanyOrReceivingCustomer',
        'shipper' => 'getShipper',
        'consignee' => 'getConsignee',
        'value_of_goods_amount' => 'getValueOfGoodsAmount',
        'value_of_goods_currency' => 'getValueOfGoodsCurrency',
        'lines' => 'getLines',
        'id' => 'getId',
        'sequence' => 'getSequence',
        'status' => 'getStatus',
        'customer_id' => 'getCustomerId',
        'quotation_id' => 'getQuotationId',
        'reference' => 'getReference',
        'order_key_eikona' => 'getOrderKeyEikona',
        'order_id_eikona' => 'getOrderIdEikona',
        'payment_process_id' => 'getPaymentProcessId',
        'payment_method' => 'getPaymentMethod',
        'refund_type' => 'getRefundType',
        'is_easybill_invoicing_active' => 'getIsEasybillInvoicingActive',
        'is_confirmation_needed' => 'getIsConfirmationNeeded',
        'is_confirmed' => 'getIsConfirmed',
        'confirmed_at' => 'getConfirmedAt',
        'is_acceptance_needed' => 'getIsAcceptanceNeeded',
        'is_accepted' => 'getIsAccepted',
        'accepted_at' => 'getAcceptedAt',
        'easybill_invoices' => 'getEasybillInvoices',
        'runtime_days_min' => 'getRuntimeDaysMin',
        'runtime_days_max' => 'getRuntimeDaysMax',
        'price_amount' => 'getPriceAmount',
        'price_currency' => 'getPriceCurrency',
        'price_amount_standard' => 'getPriceAmountStandard',
        'price_currency_standard' => 'getPriceCurrencyStandard',
        'placed_at' => 'getPlacedAt',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'truck_type' => 'getTruckType',
        'domain' => 'getDomain',
        'shipping_partner' => 'getShippingPartner',
        'delivering_partner' => 'getDeliveringPartner',
        'shipment_status' => 'getShipmentStatus',
        'tariff_category' => 'getTariffCategory',
        'lines_weight' => 'getLinesWeight',
        'lines_volume' => 'getLinesVolume',
        'lines_pallet_bays' => 'getLinesPalletBays',
        'lines_loading_meter' => 'getLinesLoadingMeter',
        'co2_emission_amount' => 'getCo2EmissionAmount',
        'co2_emission_value' => 'getCo2EmissionValue',
        'co2_emission_unit' => 'getCo2EmissionUnit',
        'shipping_partner_order_number' => 'getShippingPartnerOrderNumber',
        'delivering_partner_order_number' => 'getDeliveringPartnerOrderNumber',
        'shipment_cost' => 'getShipmentCost',
        'actual_cost' => 'getActualCost',
        'actual_price' => 'getActualPrice',
        'actual_price_standard' => 'getActualPriceStandard',
        'gross_actual_price' => 'getGrossActualPrice',
        'is_country_with_customs' => 'getIsCountryWithCustoms',
        'is_shipper_country_with_customs' => 'getIsShipperCountryWithCustoms',
        'is_charter_shipment' => 'getIsCharterShipment',
        'cost_items' => 'getCostItems',
        'quantity_of_euro_pallets' => 'getQuantityOfEuroPallets',
        'lines_units_quantity' => 'getLinesUnitsQuantity',
        'lines_packages_quantity' => 'getLinesPackagesQuantity',
        'is_invoiceable' => 'getIsInvoiceable'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const PRODUCT_DIRECT = 'DIRECT';
    public const PRODUCT_EXPRESS = 'EXPRESS';
    public const PRODUCT_EXPRESS_8 = 'EXPRESS_8';
    public const PRODUCT_EXPRESS_10 = 'EXPRESS_10';
    public const PRODUCT_EXPRESS_12 = 'EXPRESS_12';
    public const PRODUCT_EXPRESS_16 = 'EXPRESS_16';
    public const PRODUCT_FIX = 'FIX';
    public const PRODUCT_FIX_8 = 'FIX_8';
    public const PRODUCT_FIX_10 = 'FIX_10';
    public const PRODUCT_FIX_12 = 'FIX_12';
    public const PRODUCT_FIX_16 = 'FIX_16';
    public const PRODUCT_STANDARD = 'STANDARD';
    public const INCOTERM_STANDARD = 'STANDARD';
    public const INCOTERM_DAP_CLEARED = 'DAP_CLEARED';
    public const INCOTERM_DAP_UNCLEARED = 'DAP_UNCLEARED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProductAllowableValues()
    {
        return [
            self::PRODUCT_DIRECT,
            self::PRODUCT_EXPRESS,
            self::PRODUCT_EXPRESS_8,
            self::PRODUCT_EXPRESS_10,
            self::PRODUCT_EXPRESS_12,
            self::PRODUCT_EXPRESS_16,
            self::PRODUCT_FIX,
            self::PRODUCT_FIX_8,
            self::PRODUCT_FIX_10,
            self::PRODUCT_FIX_12,
            self::PRODUCT_FIX_16,
            self::PRODUCT_STANDARD,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIncotermAllowableValues()
    {
        return [
            self::INCOTERM_STANDARD,
            self::INCOTERM_DAP_CLEARED,
            self::INCOTERM_DAP_UNCLEARED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('product', $data ?? [], null);
        $this->setIfExists('transport_type', $data ?? [], null);
        $this->setIfExists('customer_order_code', $data ?? [], null);
        $this->setIfExists('coupon_code', $data ?? [], null);
        $this->setIfExists('wants_export_declaration', $data ?? [], false);
        $this->setIfExists('wants_climate_neutral_shipment', $data ?? [], true);
        $this->setIfExists('wants_insurance', $data ?? [], false);
        $this->setIfExists('incoterm', $data ?? [], null);
        $this->setIfExists('is_supplying_company_or_receiving_customer', $data ?? [], null);
        $this->setIfExists('shipper', $data ?? [], null);
        $this->setIfExists('consignee', $data ?? [], null);
        $this->setIfExists('value_of_goods_amount', $data ?? [], null);
        $this->setIfExists('value_of_goods_currency', $data ?? [], null);
        $this->setIfExists('lines', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('sequence', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('customer_id', $data ?? [], null);
        $this->setIfExists('quotation_id', $data ?? [], null);
        $this->setIfExists('reference', $data ?? [], null);
        $this->setIfExists('order_key_eikona', $data ?? [], null);
        $this->setIfExists('order_id_eikona', $data ?? [], null);
        $this->setIfExists('payment_process_id', $data ?? [], null);
        $this->setIfExists('payment_method', $data ?? [], null);
        $this->setIfExists('refund_type', $data ?? [], null);
        $this->setIfExists('is_easybill_invoicing_active', $data ?? [], null);
        $this->setIfExists('is_confirmation_needed', $data ?? [], null);
        $this->setIfExists('is_confirmed', $data ?? [], null);
        $this->setIfExists('confirmed_at', $data ?? [], null);
        $this->setIfExists('is_acceptance_needed', $data ?? [], null);
        $this->setIfExists('is_accepted', $data ?? [], null);
        $this->setIfExists('accepted_at', $data ?? [], null);
        $this->setIfExists('easybill_invoices', $data ?? [], null);
        $this->setIfExists('runtime_days_min', $data ?? [], null);
        $this->setIfExists('runtime_days_max', $data ?? [], null);
        $this->setIfExists('price_amount', $data ?? [], null);
        $this->setIfExists('price_currency', $data ?? [], null);
        $this->setIfExists('price_amount_standard', $data ?? [], null);
        $this->setIfExists('price_currency_standard', $data ?? [], null);
        $this->setIfExists('placed_at', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('truck_type', $data ?? [], null);
        $this->setIfExists('domain', $data ?? [], null);
        $this->setIfExists('shipping_partner', $data ?? [], null);
        $this->setIfExists('delivering_partner', $data ?? [], null);
        $this->setIfExists('shipment_status', $data ?? [], null);
        $this->setIfExists('tariff_category', $data ?? [], null);
        $this->setIfExists('lines_weight', $data ?? [], null);
        $this->setIfExists('lines_volume', $data ?? [], null);
        $this->setIfExists('lines_pallet_bays', $data ?? [], null);
        $this->setIfExists('lines_loading_meter', $data ?? [], null);
        $this->setIfExists('co2_emission_amount', $data ?? [], null);
        $this->setIfExists('co2_emission_value', $data ?? [], null);
        $this->setIfExists('co2_emission_unit', $data ?? [], null);
        $this->setIfExists('shipping_partner_order_number', $data ?? [], null);
        $this->setIfExists('delivering_partner_order_number', $data ?? [], null);
        $this->setIfExists('shipment_cost', $data ?? [], null);
        $this->setIfExists('actual_cost', $data ?? [], null);
        $this->setIfExists('actual_price', $data ?? [], null);
        $this->setIfExists('actual_price_standard', $data ?? [], null);
        $this->setIfExists('gross_actual_price', $data ?? [], null);
        $this->setIfExists('is_country_with_customs', $data ?? [], null);
        $this->setIfExists('is_shipper_country_with_customs', $data ?? [], null);
        $this->setIfExists('is_charter_shipment', $data ?? [], null);
        $this->setIfExists('cost_items', $data ?? [], null);
        $this->setIfExists('quantity_of_euro_pallets', $data ?? [], null);
        $this->setIfExists('lines_units_quantity', $data ?? [], null);
        $this->setIfExists('lines_packages_quantity', $data ?? [], null);
        $this->setIfExists('is_invoiceable', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['product'] === null) {
            $invalidProperties[] = "'product' can't be null";
        }
        $allowedValues = $this->getProductAllowableValues();
        if (!is_null($this->container['product']) && !in_array($this->container['product'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'product', must be one of '%s'",
                $this->container['product'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIncotermAllowableValues();
        if (!is_null($this->container['incoterm']) && !in_array($this->container['incoterm'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'incoterm', must be one of '%s'",
                $this->container['incoterm'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['shipper'] === null) {
            $invalidProperties[] = "'shipper' can't be null";
        }
        if ($this->container['consignee'] === null) {
            $invalidProperties[] = "'consignee' can't be null";
        }
        if ($this->container['lines'] === null) {
            $invalidProperties[] = "'lines' can't be null";
        }
        if ($this->container['is_country_with_customs'] === null) {
            $invalidProperties[] = "'is_country_with_customs' can't be null";
        }
        if ($this->container['is_shipper_country_with_customs'] === null) {
            $invalidProperties[] = "'is_shipper_country_with_customs' can't be null";
        }
        if ($this->container['is_charter_shipment'] === null) {
            $invalidProperties[] = "'is_charter_shipment' can't be null";
        }
        if ($this->container['quantity_of_euro_pallets'] === null) {
            $invalidProperties[] = "'quantity_of_euro_pallets' can't be null";
        }
        if ($this->container['lines_units_quantity'] === null) {
            $invalidProperties[] = "'lines_units_quantity' can't be null";
        }
        if ($this->container['lines_packages_quantity'] === null) {
            $invalidProperties[] = "'lines_packages_quantity' can't be null";
        }
        if ($this->container['is_invoiceable'] === null) {
            $invalidProperties[] = "'is_invoiceable' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets product
     *
     * @return string
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param string $product The product for which a quotation should be received. Possible values: DIRECT, EXPRESS, EXPRESS_8, EXPRESS_10, EXPRESS_12, EXPRESS_16, FIX, FIX_8, FIX_10, FIX_12, FIX_16, STANDARD.
     *
     * @return self
     */
    public function setProduct($product)
    {
        if (is_null($product)) {
            throw new \InvalidArgumentException('non-nullable product cannot be null');
        }
        $allowedValues = $this->getProductAllowableValues();
        if (!in_array($product, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'product', must be one of '%s'",
                    $product,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets transport_type
     *
     * @return string|null
     */
    public function getTransportType()
    {
        return $this->container['transport_type'];
    }

    /**
     * Sets transport_type
     *
     * @param string|null $transport_type Transport type of order. Possible values GROUPAGE, PART_LOAD, DIRECT
     *
     * @return self
     */
    public function setTransportType($transport_type)
    {
        if (is_null($transport_type)) {
            throw new \InvalidArgumentException('non-nullable transport_type cannot be null');
        }
        $this->container['transport_type'] = $transport_type;

        return $this;
    }

    /**
     * Gets customer_order_code
     *
     * @return string|null
     */
    public function getCustomerOrderCode()
    {
        return $this->container['customer_order_code'];
    }

    /**
     * Sets customer_order_code
     *
     * @param string|null $customer_order_code A code applied by customer that will appear on documents as CustomerOrderNo
     *
     * @return self
     */
    public function setCustomerOrderCode($customer_order_code)
    {
        if (is_null($customer_order_code)) {
            throw new \InvalidArgumentException('non-nullable customer_order_code cannot be null');
        }
        $this->container['customer_order_code'] = $customer_order_code;

        return $this;
    }

    /**
     * Gets coupon_code
     *
     * @return string|null
     */
    public function getCouponCode()
    {
        return $this->container['coupon_code'];
    }

    /**
     * Sets coupon_code
     *
     * @param string|null $coupon_code A code applied by customer that will allow for special actions like discount etc.
     *
     * @return self
     */
    public function setCouponCode($coupon_code)
    {
        if (is_null($coupon_code)) {
            throw new \InvalidArgumentException('non-nullable coupon_code cannot be null');
        }
        $this->container['coupon_code'] = $coupon_code;

        return $this;
    }

    /**
     * Gets wants_export_declaration
     *
     * @return bool|null
     */
    public function getWantsExportDeclaration()
    {
        return $this->container['wants_export_declaration'];
    }

    /**
     * Sets wants_export_declaration
     *
     * @param bool|null $wants_export_declaration A service where shipment will be declared for customs. Some customers do this by themselves and others book this option. This service should be only possible if shipment goes to, or comes from a country outside of the EU, like Great Britain, Norway, Switzerland.
     *
     * @return self
     */
    public function setWantsExportDeclaration($wants_export_declaration)
    {
        if (is_null($wants_export_declaration)) {
            throw new \InvalidArgumentException('non-nullable wants_export_declaration cannot be null');
        }
        $this->container['wants_export_declaration'] = $wants_export_declaration;

        return $this;
    }

    /**
     * Gets wants_climate_neutral_shipment
     *
     * @return bool|null
     */
    public function getWantsClimateNeutralShipment()
    {
        return $this->container['wants_climate_neutral_shipment'];
    }

    /**
     * Sets wants_climate_neutral_shipment
     *
     * @param bool|null $wants_climate_neutral_shipment Negative environmental impact will be reduced for this service.
     *
     * @return self
     */
    public function setWantsClimateNeutralShipment($wants_climate_neutral_shipment)
    {
        if (is_null($wants_climate_neutral_shipment)) {
            throw new \InvalidArgumentException('non-nullable wants_climate_neutral_shipment cannot be null');
        }
        $this->container['wants_climate_neutral_shipment'] = $wants_climate_neutral_shipment;

        return $this;
    }

    /**
     * Gets wants_insurance
     *
     * @return bool|null
     */
    public function getWantsInsurance()
    {
        return $this->container['wants_insurance'];
    }

    /**
     * Sets wants_insurance
     *
     * @param bool|null $wants_insurance Cargoboard will organize an insurance for this shipment. goodsValueAmount is necessary if you set wantsInsurance
     *
     * @return self
     */
    public function setWantsInsurance($wants_insurance)
    {
        if (is_null($wants_insurance)) {
            throw new \InvalidArgumentException('non-nullable wants_insurance cannot be null');
        }
        $this->container['wants_insurance'] = $wants_insurance;

        return $this;
    }

    /**
     * Gets incoterm
     *
     * @return string|null
     */
    public function getIncoterm()
    {
        return $this->container['incoterm'];
    }

    /**
     * Sets incoterm
     *
     * @param string|null $incoterm Incoterm - should always be STANDARD and if you ship to Switzerland, or UK it should be DAP
     *
     * @return self
     */
    public function setIncoterm($incoterm)
    {
        if (is_null($incoterm)) {
            throw new \InvalidArgumentException('non-nullable incoterm cannot be null');
        }
        $allowedValues = $this->getIncotermAllowableValues();
        if (!in_array($incoterm, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'incoterm', must be one of '%s'",
                    $incoterm,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['incoterm'] = $incoterm;

        return $this;
    }

    /**
     * Gets is_supplying_company_or_receiving_customer
     *
     * @return bool|null
     */
    public function getIsSupplyingCompanyOrReceivingCustomer()
    {
        return $this->container['is_supplying_company_or_receiving_customer'];
    }

    /**
     * Sets is_supplying_company_or_receiving_customer
     *
     * @param bool|null $is_supplying_company_or_receiving_customer If true customer is supplying company or receiving customer
     *
     * @return self
     */
    public function setIsSupplyingCompanyOrReceivingCustomer($is_supplying_company_or_receiving_customer)
    {
        if (is_null($is_supplying_company_or_receiving_customer)) {
            throw new \InvalidArgumentException('non-nullable is_supplying_company_or_receiving_customer cannot be null');
        }
        $this->container['is_supplying_company_or_receiving_customer'] = $is_supplying_company_or_receiving_customer;

        return $this;
    }

    /**
     * Gets shipper
     *
     * @return \kruegge82\cargoboard\Model\ShipperOrder
     */
    public function getShipper()
    {
        return $this->container['shipper'];
    }

    /**
     * Sets shipper
     *
     * @param \kruegge82\cargoboard\Model\ShipperOrder $shipper shipper
     *
     * @return self
     */
    public function setShipper($shipper)
    {
        if (is_null($shipper)) {
            throw new \InvalidArgumentException('non-nullable shipper cannot be null');
        }
        $this->container['shipper'] = $shipper;

        return $this;
    }

    /**
     * Gets consignee
     *
     * @return \kruegge82\cargoboard\Model\ConsigneeOrder
     */
    public function getConsignee()
    {
        return $this->container['consignee'];
    }

    /**
     * Sets consignee
     *
     * @param \kruegge82\cargoboard\Model\ConsigneeOrder $consignee consignee
     *
     * @return self
     */
    public function setConsignee($consignee)
    {
        if (is_null($consignee)) {
            throw new \InvalidArgumentException('non-nullable consignee cannot be null');
        }
        $this->container['consignee'] = $consignee;

        return $this;
    }

    /**
     * Gets value_of_goods_amount
     *
     * @return float|null
     */
    public function getValueOfGoodsAmount()
    {
        return $this->container['value_of_goods_amount'];
    }

    /**
     * Sets value_of_goods_amount
     *
     * @param float|null $value_of_goods_amount Amount of money - value of goods for insurance or customs
     *
     * @return self
     */
    public function setValueOfGoodsAmount($value_of_goods_amount)
    {
        if (is_null($value_of_goods_amount)) {
            throw new \InvalidArgumentException('non-nullable value_of_goods_amount cannot be null');
        }
        $this->container['value_of_goods_amount'] = $value_of_goods_amount;

        return $this;
    }

    /**
     * Gets value_of_goods_currency
     *
     * @return string|null
     */
    public function getValueOfGoodsCurrency()
    {
        return $this->container['value_of_goods_currency'];
    }

    /**
     * Sets value_of_goods_currency
     *
     * @param string|null $value_of_goods_currency Currency of value of goods. Possible values EUR
     *
     * @return self
     */
    public function setValueOfGoodsCurrency($value_of_goods_currency)
    {
        if (is_null($value_of_goods_currency)) {
            throw new \InvalidArgumentException('non-nullable value_of_goods_currency cannot be null');
        }
        $this->container['value_of_goods_currency'] = $value_of_goods_currency;

        return $this;
    }

    /**
     * Gets lines
     *
     * @return \kruegge82\cargoboard\Model\LineOrder[]
     */
    public function getLines()
    {
        return $this->container['lines'];
    }

    /**
     * Sets lines
     *
     * @param \kruegge82\cargoboard\Model\LineOrder[] $lines Line for a product.
     *
     * @return self
     */
    public function setLines($lines)
    {
        if (is_null($lines)) {
            throw new \InvalidArgumentException('non-nullable lines cannot be null');
        }
        $this->container['lines'] = $lines;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Id of order.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets sequence
     *
     * @return float|null
     */
    public function getSequence()
    {
        return $this->container['sequence'];
    }

    /**
     * Sets sequence
     *
     * @param float|null $sequence Sequence of order.
     *
     * @return self
     */
    public function setSequence($sequence)
    {
        if (is_null($sequence)) {
            throw new \InvalidArgumentException('non-nullable sequence cannot be null');
        }
        $this->container['sequence'] = $sequence;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Status of order. Possible values INITIALIZED, CREATED, WAITING_FOR_PAYMENT, CANCELLED
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return string|null
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param string|null $customer_id Id of customer.
     *
     * @return self
     */
    public function setCustomerId($customer_id)
    {
        if (is_null($customer_id)) {
            throw new \InvalidArgumentException('non-nullable customer_id cannot be null');
        }
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets quotation_id
     *
     * @return string|null
     */
    public function getQuotationId()
    {
        return $this->container['quotation_id'];
    }

    /**
     * Sets quotation_id
     *
     * @param string|null $quotation_id Id of quotation.
     *
     * @return self
     */
    public function setQuotationId($quotation_id)
    {
        if (is_null($quotation_id)) {
            throw new \InvalidArgumentException('non-nullable quotation_id cannot be null');
        }
        $this->container['quotation_id'] = $quotation_id;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string|null
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string|null $reference Reference of order.
     *
     * @return self
     */
    public function setReference($reference)
    {
        if (is_null($reference)) {
            throw new \InvalidArgumentException('non-nullable reference cannot be null');
        }
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets order_key_eikona
     *
     * @return string|null
     */
    public function getOrderKeyEikona()
    {
        return $this->container['order_key_eikona'];
    }

    /**
     * Sets order_key_eikona
     *
     * @param string|null $order_key_eikona Order key eikona
     *
     * @return self
     */
    public function setOrderKeyEikona($order_key_eikona)
    {
        if (is_null($order_key_eikona)) {
            throw new \InvalidArgumentException('non-nullable order_key_eikona cannot be null');
        }
        $this->container['order_key_eikona'] = $order_key_eikona;

        return $this;
    }

    /**
     * Gets order_id_eikona
     *
     * @return string|null
     */
    public function getOrderIdEikona()
    {
        return $this->container['order_id_eikona'];
    }

    /**
     * Sets order_id_eikona
     *
     * @param string|null $order_id_eikona Order id eikona
     *
     * @return self
     */
    public function setOrderIdEikona($order_id_eikona)
    {
        if (is_null($order_id_eikona)) {
            throw new \InvalidArgumentException('non-nullable order_id_eikona cannot be null');
        }
        $this->container['order_id_eikona'] = $order_id_eikona;

        return $this;
    }

    /**
     * Gets payment_process_id
     *
     * @return string|null
     */
    public function getPaymentProcessId()
    {
        return $this->container['payment_process_id'];
    }

    /**
     * Sets payment_process_id
     *
     * @param string|null $payment_process_id Payment process id.
     *
     * @return self
     */
    public function setPaymentProcessId($payment_process_id)
    {
        if (is_null($payment_process_id)) {
            throw new \InvalidArgumentException('non-nullable payment_process_id cannot be null');
        }
        $this->container['payment_process_id'] = $payment_process_id;

        return $this;
    }

    /**
     * Gets payment_method
     *
     * @return string|null
     */
    public function getPaymentMethod()
    {
        return $this->container['payment_method'];
    }

    /**
     * Sets payment_method
     *
     * @param string|null $payment_method Payment methods of order. Possible values INVOICE, SEPA, PAY_PAL, GIROPAY, CREDIT_CARD, DIRECT_DEBIT, PREPAYMENT, NO_PAYMENT
     *
     * @return self
     */
    public function setPaymentMethod($payment_method)
    {
        if (is_null($payment_method)) {
            throw new \InvalidArgumentException('non-nullable payment_method cannot be null');
        }
        $this->container['payment_method'] = $payment_method;

        return $this;
    }

    /**
     * Gets refund_type
     *
     * @return string|null
     */
    public function getRefundType()
    {
        return $this->container['refund_type'];
    }

    /**
     * Sets refund_type
     *
     * @param string|null $refund_type RefundType of order. Possible values FULL, PARTIAL, NO
     *
     * @return self
     */
    public function setRefundType($refund_type)
    {
        if (is_null($refund_type)) {
            throw new \InvalidArgumentException('non-nullable refund_type cannot be null');
        }
        $this->container['refund_type'] = $refund_type;

        return $this;
    }

    /**
     * Gets is_easybill_invoicing_active
     *
     * @return bool|null
     */
    public function getIsEasybillInvoicingActive()
    {
        return $this->container['is_easybill_invoicing_active'];
    }

    /**
     * Sets is_easybill_invoicing_active
     *
     * @param bool|null $is_easybill_invoicing_active Is Easybill invoicing active.
     *
     * @return self
     */
    public function setIsEasybillInvoicingActive($is_easybill_invoicing_active)
    {
        if (is_null($is_easybill_invoicing_active)) {
            throw new \InvalidArgumentException('non-nullable is_easybill_invoicing_active cannot be null');
        }
        $this->container['is_easybill_invoicing_active'] = $is_easybill_invoicing_active;

        return $this;
    }

    /**
     * Gets is_confirmation_needed
     *
     * @return bool|null
     */
    public function getIsConfirmationNeeded()
    {
        return $this->container['is_confirmation_needed'];
    }

    /**
     * Sets is_confirmation_needed
     *
     * @param bool|null $is_confirmation_needed Is confirmation needed.
     *
     * @return self
     */
    public function setIsConfirmationNeeded($is_confirmation_needed)
    {
        if (is_null($is_confirmation_needed)) {
            throw new \InvalidArgumentException('non-nullable is_confirmation_needed cannot be null');
        }
        $this->container['is_confirmation_needed'] = $is_confirmation_needed;

        return $this;
    }

    /**
     * Gets is_confirmed
     *
     * @return bool|null
     */
    public function getIsConfirmed()
    {
        return $this->container['is_confirmed'];
    }

    /**
     * Sets is_confirmed
     *
     * @param bool|null $is_confirmed Is confirmed.
     *
     * @return self
     */
    public function setIsConfirmed($is_confirmed)
    {
        if (is_null($is_confirmed)) {
            throw new \InvalidArgumentException('non-nullable is_confirmed cannot be null');
        }
        $this->container['is_confirmed'] = $is_confirmed;

        return $this;
    }

    /**
     * Gets confirmed_at
     *
     * @return \DateTime|null
     */
    public function getConfirmedAt()
    {
        return $this->container['confirmed_at'];
    }

    /**
     * Sets confirmed_at
     *
     * @param \DateTime|null $confirmed_at Date of confirmation of order
     *
     * @return self
     */
    public function setConfirmedAt($confirmed_at)
    {
        if (is_null($confirmed_at)) {
            throw new \InvalidArgumentException('non-nullable confirmed_at cannot be null');
        }
        $this->container['confirmed_at'] = $confirmed_at;

        return $this;
    }

    /**
     * Gets is_acceptance_needed
     *
     * @return bool|null
     */
    public function getIsAcceptanceNeeded()
    {
        return $this->container['is_acceptance_needed'];
    }

    /**
     * Sets is_acceptance_needed
     *
     * @param bool|null $is_acceptance_needed Is acceptance needed.
     *
     * @return self
     */
    public function setIsAcceptanceNeeded($is_acceptance_needed)
    {
        if (is_null($is_acceptance_needed)) {
            throw new \InvalidArgumentException('non-nullable is_acceptance_needed cannot be null');
        }
        $this->container['is_acceptance_needed'] = $is_acceptance_needed;

        return $this;
    }

    /**
     * Gets is_accepted
     *
     * @return bool|null
     */
    public function getIsAccepted()
    {
        return $this->container['is_accepted'];
    }

    /**
     * Sets is_accepted
     *
     * @param bool|null $is_accepted Is accepted.
     *
     * @return self
     */
    public function setIsAccepted($is_accepted)
    {
        if (is_null($is_accepted)) {
            throw new \InvalidArgumentException('non-nullable is_accepted cannot be null');
        }
        $this->container['is_accepted'] = $is_accepted;

        return $this;
    }

    /**
     * Gets accepted_at
     *
     * @return \DateTime|null
     */
    public function getAcceptedAt()
    {
        return $this->container['accepted_at'];
    }

    /**
     * Sets accepted_at
     *
     * @param \DateTime|null $accepted_at Date of acceptance of order
     *
     * @return self
     */
    public function setAcceptedAt($accepted_at)
    {
        if (is_null($accepted_at)) {
            throw new \InvalidArgumentException('non-nullable accepted_at cannot be null');
        }
        $this->container['accepted_at'] = $accepted_at;

        return $this;
    }

    /**
     * Gets easybill_invoices
     *
     * @return \kruegge82\cargoboard\Model\EasybillInvoice[]|null
     */
    public function getEasybillInvoices()
    {
        return $this->container['easybill_invoices'];
    }

    /**
     * Sets easybill_invoices
     *
     * @param \kruegge82\cargoboard\Model\EasybillInvoice[]|null $easybill_invoices easybill_invoices
     *
     * @return self
     */
    public function setEasybillInvoices($easybill_invoices)
    {
        if (is_null($easybill_invoices)) {
            throw new \InvalidArgumentException('non-nullable easybill_invoices cannot be null');
        }
        $this->container['easybill_invoices'] = $easybill_invoices;

        return $this;
    }

    /**
     * Gets runtime_days_min
     *
     * @return float|null
     */
    public function getRuntimeDaysMin()
    {
        return $this->container['runtime_days_min'];
    }

    /**
     * Sets runtime_days_min
     *
     * @param float|null $runtime_days_min Runtime days minimum.
     *
     * @return self
     */
    public function setRuntimeDaysMin($runtime_days_min)
    {
        if (is_null($runtime_days_min)) {
            throw new \InvalidArgumentException('non-nullable runtime_days_min cannot be null');
        }
        $this->container['runtime_days_min'] = $runtime_days_min;

        return $this;
    }

    /**
     * Gets runtime_days_max
     *
     * @return float|null
     */
    public function getRuntimeDaysMax()
    {
        return $this->container['runtime_days_max'];
    }

    /**
     * Sets runtime_days_max
     *
     * @param float|null $runtime_days_max Runtime days maximum.
     *
     * @return self
     */
    public function setRuntimeDaysMax($runtime_days_max)
    {
        if (is_null($runtime_days_max)) {
            throw new \InvalidArgumentException('non-nullable runtime_days_max cannot be null');
        }
        $this->container['runtime_days_max'] = $runtime_days_max;

        return $this;
    }

    /**
     * Gets price_amount
     *
     * @return float|null
     */
    public function getPriceAmount()
    {
        return $this->container['price_amount'];
    }

    /**
     * Sets price_amount
     *
     * @param float|null $price_amount Price amount.
     *
     * @return self
     */
    public function setPriceAmount($price_amount)
    {
        if (is_null($price_amount)) {
            throw new \InvalidArgumentException('non-nullable price_amount cannot be null');
        }
        $this->container['price_amount'] = $price_amount;

        return $this;
    }

    /**
     * Gets price_currency
     *
     * @return string|null
     */
    public function getPriceCurrency()
    {
        return $this->container['price_currency'];
    }

    /**
     * Sets price_currency
     *
     * @param string|null $price_currency Price currency. Possible values EUR
     *
     * @return self
     */
    public function setPriceCurrency($price_currency)
    {
        if (is_null($price_currency)) {
            throw new \InvalidArgumentException('non-nullable price_currency cannot be null');
        }
        $this->container['price_currency'] = $price_currency;

        return $this;
    }

    /**
     * Gets price_amount_standard
     *
     * @return float|null
     */
    public function getPriceAmountStandard()
    {
        return $this->container['price_amount_standard'];
    }

    /**
     * Sets price_amount_standard
     *
     * @param float|null $price_amount_standard Price amount standard.
     *
     * @return self
     */
    public function setPriceAmountStandard($price_amount_standard)
    {
        if (is_null($price_amount_standard)) {
            throw new \InvalidArgumentException('non-nullable price_amount_standard cannot be null');
        }
        $this->container['price_amount_standard'] = $price_amount_standard;

        return $this;
    }

    /**
     * Gets price_currency_standard
     *
     * @return string|null
     */
    public function getPriceCurrencyStandard()
    {
        return $this->container['price_currency_standard'];
    }

    /**
     * Sets price_currency_standard
     *
     * @param string|null $price_currency_standard Price currency standard. Possible values EUR
     *
     * @return self
     */
    public function setPriceCurrencyStandard($price_currency_standard)
    {
        if (is_null($price_currency_standard)) {
            throw new \InvalidArgumentException('non-nullable price_currency_standard cannot be null');
        }
        $this->container['price_currency_standard'] = $price_currency_standard;

        return $this;
    }

    /**
     * Gets placed_at
     *
     * @return \DateTime|null
     */
    public function getPlacedAt()
    {
        return $this->container['placed_at'];
    }

    /**
     * Sets placed_at
     *
     * @param \DateTime|null $placed_at Date of order placement
     *
     * @return self
     */
    public function setPlacedAt($placed_at)
    {
        if (is_null($placed_at)) {
            throw new \InvalidArgumentException('non-nullable placed_at cannot be null');
        }
        $this->container['placed_at'] = $placed_at;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at Date of creation of order
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime|null $updated_at Date of update of order
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets truck_type
     *
     * @return string|null
     */
    public function getTruckType()
    {
        return $this->container['truck_type'];
    }

    /**
     * Sets truck_type
     *
     * @param string|null $truck_type Truck type of order. Possible values DIRECT_BUS_PLANE, DIRECT_BUS_PLANE_XXL, DIRECT_TRUCK_7_5, DIRECT_TRUCK_12, DIRECT_TRUCK_40
     *
     * @return self
     */
    public function setTruckType($truck_type)
    {
        if (is_null($truck_type)) {
            throw new \InvalidArgumentException('non-nullable truck_type cannot be null');
        }
        $this->container['truck_type'] = $truck_type;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string|null
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string|null $domain Domain
     *
     * @return self
     */
    public function setDomain($domain)
    {
        if (is_null($domain)) {
            throw new \InvalidArgumentException('non-nullable domain cannot be null');
        }
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets shipping_partner
     *
     * @return string|null
     */
    public function getShippingPartner()
    {
        return $this->container['shipping_partner'];
    }

    /**
     * Sets shipping_partner
     *
     * @param string|null $shipping_partner Shipping partner
     *
     * @return self
     */
    public function setShippingPartner($shipping_partner)
    {
        if (is_null($shipping_partner)) {
            throw new \InvalidArgumentException('non-nullable shipping_partner cannot be null');
        }
        $this->container['shipping_partner'] = $shipping_partner;

        return $this;
    }

    /**
     * Gets delivering_partner
     *
     * @return string|null
     */
    public function getDeliveringPartner()
    {
        return $this->container['delivering_partner'];
    }

    /**
     * Sets delivering_partner
     *
     * @param string|null $delivering_partner Shipping partner
     *
     * @return self
     */
    public function setDeliveringPartner($delivering_partner)
    {
        if (is_null($delivering_partner)) {
            throw new \InvalidArgumentException('non-nullable delivering_partner cannot be null');
        }
        $this->container['delivering_partner'] = $delivering_partner;

        return $this;
    }

    /**
     * Gets shipment_status
     *
     * @return string|null
     */
    public function getShipmentStatus()
    {
        return $this->container['shipment_status'];
    }

    /**
     * Sets shipment_status
     *
     * @param string|null $shipment_status Shipment status of order. Possible values CREATED, IN_DISPOSITION, COLLECTED, TRANSIT, DELIVERED, ACTION_REQUIRED, CANCELLED, IN_DELIVERY, SCHEDULED, WAITING_FOR_CUSTOMER, CUSTOMS_CLEARANCE, MISSING_INFORMATION, ALL_DOCUMENTS_PRESENT
     *
     * @return self
     */
    public function setShipmentStatus($shipment_status)
    {
        if (is_null($shipment_status)) {
            throw new \InvalidArgumentException('non-nullable shipment_status cannot be null');
        }
        $this->container['shipment_status'] = $shipment_status;

        return $this;
    }

    /**
     * Gets tariff_category
     *
     * @return string|null
     */
    public function getTariffCategory()
    {
        return $this->container['tariff_category'];
    }

    /**
     * Sets tariff_category
     *
     * @param string|null $tariff_category Tariff category of order. Possible values A, B, C
     *
     * @return self
     */
    public function setTariffCategory($tariff_category)
    {
        if (is_null($tariff_category)) {
            throw new \InvalidArgumentException('non-nullable tariff_category cannot be null');
        }
        $this->container['tariff_category'] = $tariff_category;

        return $this;
    }

    /**
     * Gets lines_weight
     *
     * @return float|null
     */
    public function getLinesWeight()
    {
        return $this->container['lines_weight'];
    }

    /**
     * Sets lines_weight
     *
     * @param float|null $lines_weight Lines weight of quotation.
     *
     * @return self
     */
    public function setLinesWeight($lines_weight)
    {
        if (is_null($lines_weight)) {
            throw new \InvalidArgumentException('non-nullable lines_weight cannot be null');
        }
        $this->container['lines_weight'] = $lines_weight;

        return $this;
    }

    /**
     * Gets lines_volume
     *
     * @return float|null
     */
    public function getLinesVolume()
    {
        return $this->container['lines_volume'];
    }

    /**
     * Sets lines_volume
     *
     * @param float|null $lines_volume Lines volume of quotation.
     *
     * @return self
     */
    public function setLinesVolume($lines_volume)
    {
        if (is_null($lines_volume)) {
            throw new \InvalidArgumentException('non-nullable lines_volume cannot be null');
        }
        $this->container['lines_volume'] = $lines_volume;

        return $this;
    }

    /**
     * Gets lines_pallet_bays
     *
     * @return float|null
     */
    public function getLinesPalletBays()
    {
        return $this->container['lines_pallet_bays'];
    }

    /**
     * Sets lines_pallet_bays
     *
     * @param float|null $lines_pallet_bays Lines pallet bays of quotation.
     *
     * @return self
     */
    public function setLinesPalletBays($lines_pallet_bays)
    {
        if (is_null($lines_pallet_bays)) {
            throw new \InvalidArgumentException('non-nullable lines_pallet_bays cannot be null');
        }
        $this->container['lines_pallet_bays'] = $lines_pallet_bays;

        return $this;
    }

    /**
     * Gets lines_loading_meter
     *
     * @return float|null
     */
    public function getLinesLoadingMeter()
    {
        return $this->container['lines_loading_meter'];
    }

    /**
     * Sets lines_loading_meter
     *
     * @param float|null $lines_loading_meter Lines loading meter of quotation.
     *
     * @return self
     */
    public function setLinesLoadingMeter($lines_loading_meter)
    {
        if (is_null($lines_loading_meter)) {
            throw new \InvalidArgumentException('non-nullable lines_loading_meter cannot be null');
        }
        $this->container['lines_loading_meter'] = $lines_loading_meter;

        return $this;
    }

    /**
     * Gets co2_emission_amount
     *
     * @return float|null
     */
    public function getCo2EmissionAmount()
    {
        return $this->container['co2_emission_amount'];
    }

    /**
     * Sets co2_emission_amount
     *
     * @param float|null $co2_emission_amount CO2 Emission amount of quotation.
     *
     * @return self
     */
    public function setCo2EmissionAmount($co2_emission_amount)
    {
        if (is_null($co2_emission_amount)) {
            throw new \InvalidArgumentException('non-nullable co2_emission_amount cannot be null');
        }
        $this->container['co2_emission_amount'] = $co2_emission_amount;

        return $this;
    }

    /**
     * Gets co2_emission_value
     *
     * @return float|null
     */
    public function getCo2EmissionValue()
    {
        return $this->container['co2_emission_value'];
    }

    /**
     * Sets co2_emission_value
     *
     * @param float|null $co2_emission_value CO2 Emission value of quotation.
     *
     * @return self
     */
    public function setCo2EmissionValue($co2_emission_value)
    {
        if (is_null($co2_emission_value)) {
            throw new \InvalidArgumentException('non-nullable co2_emission_value cannot be null');
        }
        $this->container['co2_emission_value'] = $co2_emission_value;

        return $this;
    }

    /**
     * Gets co2_emission_unit
     *
     * @return string|null
     */
    public function getCo2EmissionUnit()
    {
        return $this->container['co2_emission_unit'];
    }

    /**
     * Sets co2_emission_unit
     *
     * @param string|null $co2_emission_unit CO2 Emission unit of quotation.
     *
     * @return self
     */
    public function setCo2EmissionUnit($co2_emission_unit)
    {
        if (is_null($co2_emission_unit)) {
            throw new \InvalidArgumentException('non-nullable co2_emission_unit cannot be null');
        }
        $this->container['co2_emission_unit'] = $co2_emission_unit;

        return $this;
    }

    /**
     * Gets shipping_partner_order_number
     *
     * @return string|null
     */
    public function getShippingPartnerOrderNumber()
    {
        return $this->container['shipping_partner_order_number'];
    }

    /**
     * Sets shipping_partner_order_number
     *
     * @param string|null $shipping_partner_order_number Shipping partner order number
     *
     * @return self
     */
    public function setShippingPartnerOrderNumber($shipping_partner_order_number)
    {
        if (is_null($shipping_partner_order_number)) {
            throw new \InvalidArgumentException('non-nullable shipping_partner_order_number cannot be null');
        }
        $this->container['shipping_partner_order_number'] = $shipping_partner_order_number;

        return $this;
    }

    /**
     * Gets delivering_partner_order_number
     *
     * @return string|null
     */
    public function getDeliveringPartnerOrderNumber()
    {
        return $this->container['delivering_partner_order_number'];
    }

    /**
     * Sets delivering_partner_order_number
     *
     * @param string|null $delivering_partner_order_number Delivering partner order number
     *
     * @return self
     */
    public function setDeliveringPartnerOrderNumber($delivering_partner_order_number)
    {
        if (is_null($delivering_partner_order_number)) {
            throw new \InvalidArgumentException('non-nullable delivering_partner_order_number cannot be null');
        }
        $this->container['delivering_partner_order_number'] = $delivering_partner_order_number;

        return $this;
    }

    /**
     * Gets shipment_cost
     *
     * @return float|null
     */
    public function getShipmentCost()
    {
        return $this->container['shipment_cost'];
    }

    /**
     * Sets shipment_cost
     *
     * @param float|null $shipment_cost Shipment cost of order.
     *
     * @return self
     */
    public function setShipmentCost($shipment_cost)
    {
        if (is_null($shipment_cost)) {
            throw new \InvalidArgumentException('non-nullable shipment_cost cannot be null');
        }
        $this->container['shipment_cost'] = $shipment_cost;

        return $this;
    }

    /**
     * Gets actual_cost
     *
     * @return float|null
     */
    public function getActualCost()
    {
        return $this->container['actual_cost'];
    }

    /**
     * Sets actual_cost
     *
     * @param float|null $actual_cost Actual cost of order.
     *
     * @return self
     */
    public function setActualCost($actual_cost)
    {
        if (is_null($actual_cost)) {
            throw new \InvalidArgumentException('non-nullable actual_cost cannot be null');
        }
        $this->container['actual_cost'] = $actual_cost;

        return $this;
    }

    /**
     * Gets actual_price
     *
     * @return float|null
     */
    public function getActualPrice()
    {
        return $this->container['actual_price'];
    }

    /**
     * Sets actual_price
     *
     * @param float|null $actual_price Actual price of order.
     *
     * @return self
     */
    public function setActualPrice($actual_price)
    {
        if (is_null($actual_price)) {
            throw new \InvalidArgumentException('non-nullable actual_price cannot be null');
        }
        $this->container['actual_price'] = $actual_price;

        return $this;
    }

    /**
     * Gets actual_price_standard
     *
     * @return float|null
     */
    public function getActualPriceStandard()
    {
        return $this->container['actual_price_standard'];
    }

    /**
     * Sets actual_price_standard
     *
     * @param float|null $actual_price_standard Actual standard price of order.
     *
     * @return self
     */
    public function setActualPriceStandard($actual_price_standard)
    {
        if (is_null($actual_price_standard)) {
            throw new \InvalidArgumentException('non-nullable actual_price_standard cannot be null');
        }
        $this->container['actual_price_standard'] = $actual_price_standard;

        return $this;
    }

    /**
     * Gets gross_actual_price
     *
     * @return float|null
     */
    public function getGrossActualPrice()
    {
        return $this->container['gross_actual_price'];
    }

    /**
     * Sets gross_actual_price
     *
     * @param float|null $gross_actual_price Gross actual price of order.
     *
     * @return self
     */
    public function setGrossActualPrice($gross_actual_price)
    {
        if (is_null($gross_actual_price)) {
            throw new \InvalidArgumentException('non-nullable gross_actual_price cannot be null');
        }
        $this->container['gross_actual_price'] = $gross_actual_price;

        return $this;
    }

    /**
     * Gets is_country_with_customs
     *
     * @return bool
     */
    public function getIsCountryWithCustoms()
    {
        return $this->container['is_country_with_customs'];
    }

    /**
     * Sets is_country_with_customs
     *
     * @param bool $is_country_with_customs True if  shipper or consignee is in one of the countries with customs.
     *
     * @return self
     */
    public function setIsCountryWithCustoms($is_country_with_customs)
    {
        if (is_null($is_country_with_customs)) {
            throw new \InvalidArgumentException('non-nullable is_country_with_customs cannot be null');
        }
        $this->container['is_country_with_customs'] = $is_country_with_customs;

        return $this;
    }

    /**
     * Gets is_shipper_country_with_customs
     *
     * @return bool
     */
    public function getIsShipperCountryWithCustoms()
    {
        return $this->container['is_shipper_country_with_customs'];
    }

    /**
     * Sets is_shipper_country_with_customs
     *
     * @param bool $is_shipper_country_with_customs True if  shipper is in one of the countries with customs.
     *
     * @return self
     */
    public function setIsShipperCountryWithCustoms($is_shipper_country_with_customs)
    {
        if (is_null($is_shipper_country_with_customs)) {
            throw new \InvalidArgumentException('non-nullable is_shipper_country_with_customs cannot be null');
        }
        $this->container['is_shipper_country_with_customs'] = $is_shipper_country_with_customs;

        return $this;
    }

    /**
     * Gets is_charter_shipment
     *
     * @return bool
     */
    public function getIsCharterShipment()
    {
        return $this->container['is_charter_shipment'];
    }

    /**
     * Sets is_charter_shipment
     *
     * @param bool $is_charter_shipment True for Charter shipment (transport type direct or part-load).
     *
     * @return self
     */
    public function setIsCharterShipment($is_charter_shipment)
    {
        if (is_null($is_charter_shipment)) {
            throw new \InvalidArgumentException('non-nullable is_charter_shipment cannot be null');
        }
        $this->container['is_charter_shipment'] = $is_charter_shipment;

        return $this;
    }

    /**
     * Gets cost_items
     *
     * @return \kruegge82\cargoboard\Model\CostItemOrder[]|null
     */
    public function getCostItems()
    {
        return $this->container['cost_items'];
    }

    /**
     * Sets cost_items
     *
     * @param \kruegge82\cargoboard\Model\CostItemOrder[]|null $cost_items cost_items
     *
     * @return self
     */
    public function setCostItems($cost_items)
    {
        if (is_null($cost_items)) {
            throw new \InvalidArgumentException('non-nullable cost_items cannot be null');
        }
        $this->container['cost_items'] = $cost_items;

        return $this;
    }

    /**
     * Gets quantity_of_euro_pallets
     *
     * @return object
     */
    public function getQuantityOfEuroPallets()
    {
        return $this->container['quantity_of_euro_pallets'];
    }

    /**
     * Sets quantity_of_euro_pallets
     *
     * @param object $quantity_of_euro_pallets Quantity of euro pallets from lines.
     *
     * @return self
     */
    public function setQuantityOfEuroPallets($quantity_of_euro_pallets)
    {
        if (is_null($quantity_of_euro_pallets)) {
            throw new \InvalidArgumentException('non-nullable quantity_of_euro_pallets cannot be null');
        }
        $this->container['quantity_of_euro_pallets'] = $quantity_of_euro_pallets;

        return $this;
    }

    /**
     * Gets lines_units_quantity
     *
     * @return object
     */
    public function getLinesUnitsQuantity()
    {
        return $this->container['lines_units_quantity'];
    }

    /**
     * Sets lines_units_quantity
     *
     * @param object $lines_units_quantity Quantity of units from lines - all possible package types.
     *
     * @return self
     */
    public function setLinesUnitsQuantity($lines_units_quantity)
    {
        if (is_null($lines_units_quantity)) {
            throw new \InvalidArgumentException('non-nullable lines_units_quantity cannot be null');
        }
        $this->container['lines_units_quantity'] = $lines_units_quantity;

        return $this;
    }

    /**
     * Gets lines_packages_quantity
     *
     * @return object
     */
    public function getLinesPackagesQuantity()
    {
        return $this->container['lines_packages_quantity'];
    }

    /**
     * Sets lines_packages_quantity
     *
     * @param object $lines_packages_quantity Quantity of units from lines - package type KT (Cardboard).
     *
     * @return self
     */
    public function setLinesPackagesQuantity($lines_packages_quantity)
    {
        if (is_null($lines_packages_quantity)) {
            throw new \InvalidArgumentException('non-nullable lines_packages_quantity cannot be null');
        }
        $this->container['lines_packages_quantity'] = $lines_packages_quantity;

        return $this;
    }

    /**
     * Gets is_invoiceable
     *
     * @return object
     */
    public function getIsInvoiceable()
    {
        return $this->container['is_invoiceable'];
    }

    /**
     * Sets is_invoiceable
     *
     * @param object $is_invoiceable An order is considered invoiceable under the following conditions: a) If no invoice exists for the order. b) If there are existing invoices for the order, the actual price of the remaining uninvoiced cost items should be different from 0.
     *
     * @return self
     */
    public function setIsInvoiceable($is_invoiceable)
    {
        if (is_null($is_invoiceable)) {
            throw new \InvalidArgumentException('non-nullable is_invoiceable cannot be null');
        }
        $this->container['is_invoiceable'] = $is_invoiceable;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


